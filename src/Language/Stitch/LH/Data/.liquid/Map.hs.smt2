(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun Data.Set.Internal.singleton () Int)
(declare-fun Data.Set.Internal.insert () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun listElts () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 () Int)
(declare-fun a$35$$35$a1TI () Int)
(declare-fun lq_karg$36$VV$35$$35$456$35$$35$k_$35$$35$457 () Int)
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun b$35$$35$a1TJ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_karg$36$p$35$$35$k_$35$$35$552 () Int)
(declare-fun Set_sng () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$457 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_karg$36$p$35$$35$k_$35$$35$502 () Int)
(declare-fun Language.Stitch.LH.Data.Map.insert () Int)
(declare-fun lq_tmp$36$x$35$$35$511 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 () Int)
(declare-fun Data.Map.Internal.Bin () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun mapKeys () Int)
(declare-fun lq_tmp$36$x$35$$35$465 () Int)
(declare-fun autolen () Int)
(declare-fun lq_karg$36$p$35$$35$k_$35$$35$454 () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun Data.Set.Internal.null () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun p () Int)
(declare-fun lq_tmp$36$x$35$$35$510 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun papp2 () Int)
(declare-fun Data.Map.Internal.$36$WBin () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$515 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_karg$36$VV$35$$35$551$35$$35$k_$35$$35$552 () Int)
(declare-fun Data.Set.Internal.empty () LSet)
(declare-fun GHC.List.filter () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun Data.Set.Internal.intersection () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun Data.Set.Internal.Bin () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun Data.Set.Internal.isSubsetOf () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$p$35$$35$k_$35$$35$499 () Int)
(declare-fun lq_tmp$36$x$35$$35$464 () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun m$35$$35$a1TH () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805240$35$$35$d31K () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$457 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Utils.Containers.Internal.TypeError.C$58$Whoops () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun Data.Set.Internal.difference () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Language.Stitch.LH.Data.Map.lookup () Int)
(declare-fun lq_tmp$36$x$35$$35$514 () Int)
(declare-fun lq_rnm$36$p$35$$35$101 () Int)
(declare-fun Data.Set.Internal.fromList () Int)
(declare-fun lit$36$stitch$45$lh$45$1.0$45$7VT9AU5w8fLFLZLV8dTTsH () Str)
(declare-fun fix$36$$36$dOrd_a1UY () Int)
(declare-fun lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$454 () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun Data.Set.Internal.delete () Int)
(declare-fun a$35$$35$a1TG () Int)
(declare-fun lq_karg$36$VV$35$$35$453$35$$35$k_$35$$35$454 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun m$35$$35$a1TK () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792805242$35$$35$d31M () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun Data.Set.Internal.$36$WBin () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 () Int)
(declare-fun Data.Map.Internal.Tip () Int)
(declare-fun lq_tmp$36$x$35$$35$513 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun Language.Stitch.LH.Data.Map.empty () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun ds_d30o () Int)
(declare-fun Language.Stitch.LH.Data.Map.goEmpty () Int)
(declare-fun Data.Set.Internal.union () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$466 () Int)
(declare-fun lq_karg$36$p$35$$35$k_$35$$35$457 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun Data.Set.Internal.member () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lit$36$Language.Stitch.LH.Data.Map () Str)
(declare-fun fix$36$$36$dOrd_a1V6 () Int)
(declare-fun lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 () Int)
(declare-fun lq_rnm$36$p$35$$35$111 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Data.Set.Internal.Tip () LSet)
(declare-fun GHC.List.repeat () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$454 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun lq_tmp$36$x$35$$35$512 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$17 (Int LSet) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) LSet)
(declare-fun apply$35$$35$18 (Int LSet) LSet)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) LSet)
(declare-fun apply$35$$35$15 (Int LSet) Int)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) LSet)
(declare-fun apply$35$$35$19 (Int LSet) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) LSet)
(declare-fun apply$35$$35$16 (Int LSet) Bool)
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$17 (LSet) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) LSet)
(declare-fun coerce$35$$35$18 (LSet) LSet)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) LSet)
(declare-fun coerce$35$$35$15 (LSet) Int)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) LSet)
(declare-fun coerce$35$$35$19 (LSet) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) LSet)
(declare-fun coerce$35$$35$16 (LSet) Bool)
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$17 (LSet Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool LSet) Int)
(declare-fun smt_lambda$35$$35$18 (LSet LSet) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int LSet) Int)
(declare-fun smt_lambda$35$$35$15 (LSet Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str LSet) Int)
(declare-fun smt_lambda$35$$35$19 (LSet (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) LSet) Int)
(declare-fun smt_lambda$35$$35$16 (LSet Bool) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$2$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$3$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$4$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$5$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$6$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$7$35$$35$15 () LSet)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)

(assert (distinct lit$36$Language.Stitch.LH.Data.Map lit$36$stitch$45$lh$45$1.0$45$7VT9AU5w8fLFLZLV8dTTsH))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$stitch$45$lh$45$1.0$45$7VT9AU5w8fLFLZLV8dTTsH) 36))
(assert (= (strLen lit$36$Language.Stitch.LH.Data.Map) 27))
(push 1)
(assert false)
(push 1)
(assert (not (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$111) VV$35$$35$F$35$$35$2)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (or  (exists ((lq_karg$36$p$35$$35$k_$35$$35$502 Int) (lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 Int) (lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 Int) (lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 Int) (lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 Int)) (and (and (= lq_karg$36$p$35$$35$k_$35$$35$502 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 m$35$$35$a1TK) (= lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 VV$35$$35$F$35$$35$3) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 b$35$$35$a1TJ) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 a$35$$35$a1TI)) (exists ((VV$35$$35$F$35$$35$8 Int)) (and (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) VV$35$$35$F$35$$35$8) (= VV$35$$35$F$35$$35$8 b$35$$35$a1TJ)) (and (= lq_karg$36$p$35$$35$k_$35$$35$502 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 m$35$$35$a1TK) (= lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 VV$35$$35$F$35$$35$8) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 b$35$$35$a1TJ) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 a$35$$35$a1TI)))))) (exists ((lq_karg$36$p$35$$35$k_$35$$35$502 Int) (lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 Int) (lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 Int) (lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 Int) (lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 Int)) (and (and (= lq_karg$36$p$35$$35$k_$35$$35$502 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 m$35$$35$a1TK) (= lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 VV$35$$35$F$35$$35$3) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 b$35$$35$a1TJ) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 a$35$$35$a1TI)) (exists ((VV$35$$35$F$35$$35$6 Int)) (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) VV$35$$35$F$35$$35$6) (and (= lq_karg$36$p$35$$35$k_$35$$35$502 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$502 m$35$$35$a1TK) (= lq_karg$36$VV$35$$35$501$35$$35$k_$35$$35$502 VV$35$$35$F$35$$35$6) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$502 b$35$$35$a1TJ) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$502 a$35$$35$a1TI))))))) (or  (exists ((lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 Int) (lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 Int) (lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 Int) (lq_karg$36$p$35$$35$k_$35$$35$499 Int) (lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 Int)) (and (and (= lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 VV$35$$35$F$35$$35$3) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 a$35$$35$a1TI) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 b$35$$35$a1TJ) (= lq_karg$36$p$35$$35$k_$35$$35$499 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 m$35$$35$a1TK)) (exists ((VV$35$$35$F$35$$35$7 Int)) (and (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) VV$35$$35$F$35$$35$7) (= VV$35$$35$F$35$$35$7 b$35$$35$a1TJ)) (and (= lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 VV$35$$35$F$35$$35$7) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 a$35$$35$a1TI) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 b$35$$35$a1TJ) (= lq_karg$36$p$35$$35$k_$35$$35$499 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 m$35$$35$a1TK)))))) (exists ((lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 Int) (lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 Int) (lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 Int) (lq_karg$36$p$35$$35$k_$35$$35$499 Int) (lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 Int)) (and (and (= lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 VV$35$$35$F$35$$35$3) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 a$35$$35$a1TI) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 b$35$$35$a1TJ) (= lq_karg$36$p$35$$35$k_$35$$35$499 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 m$35$$35$a1TK)) (exists ((VV$35$$35$F$35$$35$5 Int)) (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) VV$35$$35$F$35$$35$5) (and (= lq_karg$36$VV$35$$35$498$35$$35$k_$35$$35$499 VV$35$$35$F$35$$35$5) (= lq_karg$36$a$35$$35$a1TI$35$$35$k_$35$$35$499 a$35$$35$a1TI) (= lq_karg$36$b$35$$35$a1TJ$35$$35$k_$35$$35$499 b$35$$35$a1TJ) (= lq_karg$36$p$35$$35$k_$35$$35$499 lq_rnm$36$p$35$$35$101) (= lq_karg$36$m$35$$35$a1TK$35$$35$k_$35$$35$499 m$35$$35$a1TK)))))))) GHC.Types.True (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) b$35$$35$a1TJ) (not GHC.Types.False)))
(push 1)
(assert (not (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) lq_rnm$36$p$35$$35$101) VV$35$$35$F$35$$35$3)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and GHC.Types.True (and (= (not (smt_set_mem a$35$$35$a1TG (apply$35$$35$3 (as mapKeys Int) m$35$$35$a1TH))) (= VV$35$$35$F$35$$35$10 (as GHC.Maybe.Nothing Int))) (= VV$35$$35$F$35$$35$10 (apply$35$$35$0 (apply$35$$35$0 (as Language.Stitch.LH.Data.Map.lookup Int) a$35$$35$a1TG) m$35$$35$a1TH)) (= VV$35$$35$F$35$$35$10 (apply$35$$35$0 (apply$35$$35$0 (as Language.Stitch.LH.Data.Map.lookup Int) a$35$$35$a1TG) m$35$$35$a1TH))) (not GHC.Types.False)))
(push 1)
(assert (not (= (not (smt_set_mem a$35$$35$a1TG (apply$35$$35$3 (as mapKeys Int) m$35$$35$a1TH))) (= VV$35$$35$F$35$$35$10 (as GHC.Maybe.Nothing Int)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (exists ((lq_karg$36$VV$35$$35$456$35$$35$k_$35$$35$457 Int) (lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$457 Int) (lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$457 Int) (lq_karg$36$p$35$$35$k_$35$$35$457 Int)) (and (and (= lq_karg$36$VV$35$$35$456$35$$35$k_$35$$35$457 VV$35$$35$F$35$$35$11) (= lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$457 m$35$$35$a1TH) (= lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$457 a$35$$35$a1TG) (= lq_karg$36$p$35$$35$k_$35$$35$457 p)) (exists ((VV$35$$35$F$35$$35$14 Int)) (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) p) VV$35$$35$F$35$$35$14) (and (= lq_karg$36$VV$35$$35$456$35$$35$k_$35$$35$457 VV$35$$35$F$35$$35$14) (= lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$457 m$35$$35$a1TH) (= lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$457 a$35$$35$a1TG) (= lq_karg$36$p$35$$35$k_$35$$35$457 p)))))) (exists ((lq_karg$36$p$35$$35$k_$35$$35$454 Int) (lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$454 Int) (lq_karg$36$VV$35$$35$453$35$$35$k_$35$$35$454 Int) (lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$454 Int)) (and (and (= lq_karg$36$p$35$$35$k_$35$$35$454 p) (= lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$454 a$35$$35$a1TG) (= lq_karg$36$VV$35$$35$453$35$$35$k_$35$$35$454 VV$35$$35$F$35$$35$11) (= lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$454 m$35$$35$a1TH)) (exists ((VV$35$$35$F$35$$35$13 Int)) (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) p) VV$35$$35$F$35$$35$13) (and (= lq_karg$36$p$35$$35$k_$35$$35$454 p) (= lq_karg$36$a$35$$35$a1TG$35$$35$k_$35$$35$454 a$35$$35$a1TG) (= lq_karg$36$VV$35$$35$453$35$$35$k_$35$$35$454 VV$35$$35$F$35$$35$13) (= lq_karg$36$m$35$$35$a1TH$35$$35$k_$35$$35$454 m$35$$35$a1TH))))))) GHC.Types.True (not GHC.Types.False)))
(push 1)
(assert (not (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) p) VV$35$$35$F$35$$35$11)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)

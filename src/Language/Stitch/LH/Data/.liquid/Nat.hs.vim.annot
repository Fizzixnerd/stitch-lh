1:1-1:1::Language.Stitch.LH.Data.Nat.$trModule :: "GHC.Types.Module"
10:1-10:4::Language.Stitch.LH.Data.Nat.max :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:a -> x3:a -> {VV : a | VV == (if x2 > x3 then x2 else x3)}"
10:5-10:6::a :: "a"
10:7-10:8::b :: "a"
10:14-10:15::a :: "{VV : a | VV == a}"
10:18-10:19::b :: "{VV : a | VV == b}"
10:25-10:26::a :: "{VV : a | VV == a}"
10:32-10:33::b :: "{VV : a | VV == b}"
14:1-14:6::Language.Stitch.LH.Data.Nat.minus :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {VV : GHC.Types.Int | VV == (if 0 > x1 - x2 then 0 else x1 - x2)}"
14:7-14:8::a :: "GHC.Types.Int"
14:9-14:10::b :: "GHC.Types.Int"
14:17-14:18::lq_anf$##7205759403792803280 :: "GHC.Types.Int"
14:19-14:26::lq_anf$##7205759403792803281 :: "{v : GHC.Types.Int | v == a - b}"
14:20-14:21::a :: "{v : GHC.Types.Int | v == a}"
14:24-14:25::b :: "{v : GHC.Types.Int | v == b}"
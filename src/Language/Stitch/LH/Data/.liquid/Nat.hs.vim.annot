1:1-1:1::Language.Stitch.LH.Data.Nat.$trModule :: "GHC.Types.Module"
12:1-12:4::Language.Stitch.LH.Data.Nat.max :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:a -> x3:a -> {VV : a | VV == (if x2 > x3 then x2 else x3)}"
12:5-12:6::a :: "a"
12:7-12:8::b :: "a"
12:14-12:15::a :: "{VV : a | VV == a}"
12:18-12:19::b :: "{VV : a | VV == b}"
12:25-12:26::a :: "{VV : a | VV == a}"
12:32-12:33::b :: "{VV : a | VV == b}"
16:1-16:6::Language.Stitch.LH.Data.Nat.minus :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {VV : GHC.Types.Int | VV == (if 0 > x1 - x2 then 0 else x1 - x2)}"
16:7-16:8::a :: "GHC.Types.Int"
16:9-16:10::b :: "GHC.Types.Int"
16:17-16:18::lq_anf$##7205759403792808029 :: "GHC.Types.Int"
16:19-16:26::lq_anf$##7205759403792808030 :: "{v : GHC.Types.Int | v == a - b}"
16:20-16:21::a :: "{v : GHC.Types.Int | v == a}"
16:24-16:25::b :: "{v : GHC.Types.Int | v == b}"
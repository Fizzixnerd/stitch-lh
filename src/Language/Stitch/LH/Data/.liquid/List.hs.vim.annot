1:1-1:1::Language.Stitch.LH.Data.List.$trModule :: "GHC.Types.Module"
32:1-32:6::Language.Stitch.LH.Data.List.empty :: "forall a .\n{VV : [a] | VV == []\n            && length VV == 0}"
39:1-39:5::Language.Stitch.LH.Data.List.cons :: "forall a .\nx1:a -> x2:[a] -> {VV : [a] | VV == : x1 x2\n                              && length VV == 1 + length x2}"
39:6-39:7::a :: "a"
39:8-39:9::b :: "[a]"
39:12-39:13::a :: "{VV : a | VV == a}"
39:14-39:15::b :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == b}"
46:1-46:7::Language.Stitch.LH.Data.List.elemAt :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [a] | length VV > x1} -> a"
46:18-46:19::x :: "{VV : a | VV == x}"
47:19-47:34::Language.Stitch.LH.Data.List.elemAt :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [a] | length VV > x1} -> a"
47:26-47:31::lq_anf$##7205759403792804228 :: "GHC.Types.Int"
47:27-47:28::ds_d2KF :: "{v : GHC.Types.Int | v >= 0}"
47:29-47:30::lq_anf$##7205759403792804227 :: "GHC.Types.Int"
47:32-47:34::xs :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == xs}"
57:1-57:5::Language.Stitch.LH.Data.List.take :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [a] | length VV >= x1} -> {VV : [a] | length VV == x1}"
57:12-57:14::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | length v == 0\n                                                  && len v == 0\n                                                  && v == []} | VV == []}"
58:17-58:18::x :: "{VV : a | VV == x}"
58:19-58:34::lq_anf$##7205759403792804236 :: "[a]"
58:25-58:30::lq_anf$##7205759403792804235 :: "GHC.Types.Int"
58:26-58:27::ds_d2Kk :: "{v : GHC.Types.Int | v >= 0}"
58:28-58:29::lq_anf$##7205759403792804234 :: "GHC.Types.Int"
58:31-58:33::xs :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == xs}"
66:1-66:7::Language.Stitch.LH.Data.List.length :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == length x1\n                                && VV >= 0}"
66:13-66:14::lq_anf$##7205759403792804238 :: "{v : GHC.Prim.Int# | v == 0}"
67:17-67:18::lq_anf$##7205759403792804240 :: "GHC.Types.Int"
67:21-67:30::lq_anf$##7205759403792804241 :: "{v : GHC.Types.Int | v == length xs\n                     && v >= 0}"
67:28-67:30::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
77:1-77:7::Language.Stitch.LH.Data.List.append :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | length VV == length x1 + length x2}"
77:11-77:13::ys :: "[a]"
77:16-77:18::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
78:20-78:21::x :: "{VV : a | VV == x}"
78:22-78:36::lq_anf$##7205759403792804243 :: "{v : [a] | length v == length xs + length ys\n           && v == append xs ys}"
78:30-78:32::xs :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == xs}"
78:33-78:35::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
87:1-87:13::Language.Stitch.LH.Data.List.appendLength :: "forall a .\nx1:[a] -> x2:[a] -> {VV : () | length (append x1 x2) == length x1 + length x2}"
87:14-87:16::xs :: "[a]"
87:17-87:19::ys :: "[a]"
87:22-87:29::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
87:32-87:44::lq_anf$##7205759403792804244 :: "{v : [a] | length v == length xs + length ys\n           && v == append xs ys}"
87:39-87:41::xs :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == xs}"
87:42-87:44::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
97:1-97:20::Language.Stitch.LH.Data.List.elemAtThroughAppend :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : [a] | x1 < length VV} -> x3:[a] -> {VV : () | elemAt x1 (append x2 x3) == elemAt x1 x2}"
97:21-97:22::i :: "{VV : GHC.Types.Int | VV >= 0}"
97:23-97:25::xs :: "{VV : [a] | i < length VV}"
97:26-97:28::ys :: "[a]"
98:6-98:7::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
98:11-98:12::lq_anf$##7205759403792804246 :: "GHC.Types.Int"
98:18-98:25::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
98:28-98:46::lq_anf$##7205759403792804254 :: "{v : () | length (append xs ys) == length xs + length ys}"
98:41-98:43::xs :: "{v : [a] | i < length v\n           && len v >= 0\n           && length v >= 0\n           && v == xs}"
98:44-98:46::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
99:13-99:15::_ :: "{v : [a] | i < length v\n           && len v >= 0\n           && length v >= 0\n           && v == xs}"
100:16-100:50::Language.Stitch.LH.Data.List.elemAtThroughAppend :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : [a] | x1 < length VV} -> x3:[a] -> {VV : () | elemAt x1 (append x2 x3) == elemAt x1 x2}"
100:36-100:43::lq_anf$##7205759403792804253 :: "GHC.Types.Int"
100:37-100:38::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
100:41-100:42::lq_anf$##7205759403792804252 :: "GHC.Types.Int"
100:44-100:47::xss :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == xss}"
100:48-100:50::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
101:11-101:18::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
101:21-101:39::lq_anf$##7205759403792804250 :: "{v : () | length (append xs ys) == length xs + length ys}"
101:34-101:36::xs :: "{v : [a] | i < length v\n           && len v >= 0\n           && length v >= 0\n           && v == xs}"
101:37-101:39::ys :: "{v : [a] | len v >= 0\n           && length v >= 0\n           && v == ys}"
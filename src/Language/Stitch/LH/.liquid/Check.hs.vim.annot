1:1-1:1::Language.Stitch.LH.Check.$trModule :: "GHC.Types.Module"
71:10-71:26::Language.Stitch.LH.Check.$fPrettyScopedExp :: "(Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Check.ScopedExp)"
72:3-72:9::$cpretty :: "Language.Stitch.LH.Check.ScopedExp -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
72:28-72:64::Language.Stitch.LH.Unchecked.$fPrettyScopedUExp :: "{v : (Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Unchecked.ScopedUExp) | v == $fPrettyScopedUExp}"
72:35-72:64::lq_anf$##7205759403792812377 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | n v == n}"
72:47-72:48::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
72:49-72:63::lq_anf$##7205759403792812376 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
72:61-72:62::e :: "{v : Language.Stitch.LH.Check.Exp | v == e\n                                    && numFreeVarsExp v >= 0\n                                    && numFreeVarsExp v <= n}"
76:1-76:11::Language.Stitch.LH.Check.uncheckExp :: "x1:Language.Stitch.LH.Check.Exp -> {uexp : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp x1 == numFreeVars uexp}"
77:14-77:20::Language.Stitch.LH.Unchecked.UVar :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : Language.Stitch.LH.Unchecked.UExp | v == UVar x1\n                                                                            && lqdc##$select v == x1\n                                                                            && numFreeVars v == x1 + 1}"
77:19-77:20::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
78:15-78:37::Language.Stitch.LH.Unchecked.ULam :: "x1:Language.Stitch.LH.Type.Ty -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == ULam x1 x2\n                                                                                                                  && lqdc##$select v == x1\n                                                                                                                  && lqdc##$select v == x2\n                                                                                                                  && numFreeVars v == (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1)}"
78:20-78:22::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
78:23-78:37::lq_anf$##7205759403792811998 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
78:35-78:36::e :: "{v : Language.Stitch.LH.Check.Exp | v == e\n                                    && numFreeVarsExp v >= 0}"
79:16-79:52::Language.Stitch.LH.Unchecked.UApp :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == UApp x1 x2\n                                                                                                                         && lqdc##$select v == x1\n                                                                                                                         && lqdc##$select v == x2\n                                                                                                                         && numFreeVars v == (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2)}"
79:21-79:36::lq_anf$##7205759403792811999 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
79:33-79:35::e1 :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
79:37-79:52::lq_anf$##7205759403792812000 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
79:49-79:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && funArgTy (exprType e1) == exprType v\n                                    && numFreeVarsExp v >= 0}"
80:16-80:52::Language.Stitch.LH.Unchecked.ULet :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == ULet x1 x2\n                                                                                                                         && lqdc##$select v == x1\n                                                                                                                         && lqdc##$select v == x2\n                                                                                                                         && numFreeVars v == (if numFreeVars x1 > (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1) then numFreeVars x1 else (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1))}"
80:21-80:36::lq_anf$##7205759403792812001 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
80:33-80:35::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1\n                                    && numFreeVarsExp v >= 0}"
80:37-80:52::lq_anf$##7205759403792812002 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
80:49-80:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
81:21-81:62::Language.Stitch.LH.Unchecked.UArith :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Op.ArithOp -> x3:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == UArith x1 x2 x3\n                                                                                                                                                             && lqdc##$select v == x1\n                                                                                                                                                             && lqdc##$select v == x2\n                                                                                                                                                             && lqdc##$select v == x3\n                                                                                                                                                             && numFreeVars v == (if numFreeVars x1 > numFreeVars x3 then numFreeVars x1 else numFreeVars x3)}"
81:28-81:43::lq_anf$##7205759403792812003 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
81:40-81:42::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
81:44-81:46::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
81:47-81:62::lq_anf$##7205759403792812004 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
81:59-81:61::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e2\n                                    && numFreeVarsExp v >= 0}"
82:20-82:73::Language.Stitch.LH.Unchecked.UCond :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> x3:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == UCond x1 x2 x3\n                                                                                                                                                                 && lqdc##$select v == x1\n                                                                                                                                                                 && lqdc##$select v == x2\n                                                                                                                                                                 && lqdc##$select v == x3\n                                                                                                                                                                 && numFreeVars v == (if (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2) > numFreeVars x3 then (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2) else numFreeVars x3)}"
82:26-82:41::lq_anf$##7205759403792812005 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
82:38-82:40::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
82:42-82:57::lq_anf$##7205759403792812006 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
82:54-82:56::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
82:58-82:73::lq_anf$##7205759403792812007 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e3 == numFreeVars v}"
82:70-82:72::e3 :: "{v : Language.Stitch.LH.Check.Exp | v == e3\n                                    && exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0}"
83:12-83:31::Language.Stitch.LH.Unchecked.UFix :: "x1:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | v == UFix x1\n                                                                                 && lqdc##$select v == x1\n                                                                                 && numFreeVars v == numFreeVars x1}"
83:17-83:31::lq_anf$##7205759403792812008 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
83:29-83:30::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0}"
84:13-84:20::Language.Stitch.LH.Unchecked.UIntE :: "x1:GHC.Types.Int -> {v : Language.Stitch.LH.Unchecked.UExp | v == UIntE x1\n                                                             && lqdc##$select v == x1\n                                                             && numFreeVars v == 0}"
84:19-84:20::i :: "{v : GHC.Types.Int | v == i}"
85:14-85:22::Language.Stitch.LH.Unchecked.UBoolE :: "x1:GHC.Types.Bool -> {v : Language.Stitch.LH.Unchecked.UExp | v == UBoolE x1\n                                                              && lqdc##$select v == x1\n                                                              && numFreeVars v == 0}"
85:21-85:22::b :: "{v : GHC.Types.Bool | v == b}"
89:1-89:9::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
89:23-89:25::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
90:23-90:43::Language.Stitch.LH.Type.TFun :: "x1:Language.Stitch.LH.Type.Ty -> x2:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | isFunTy v\n                                                                                                    && v == TFun x1 x2\n                                                                                                    && funArgTy v == x1\n                                                                                                    && funResTy v == x2}"
90:28-90:30::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
90:31-90:43::lq_anf$##7205759403792812010 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e}"
90:41-90:42::e :: "{v : Language.Stitch.LH.Check.Exp | v == e\n                                    && numFreeVarsExp v >= 0}"
91:23-91:45::Language.Stitch.LH.Type.funResTy :: "x1:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | v == funResTy x1}"
91:32-91:45::lq_anf$##7205759403792812011 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
91:42-91:44::e1 :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
92:23-92:34::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
92:32-92:34::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
93:27-93:39::Language.Stitch.LH.Op.arithType :: "x1:Language.Stitch.LH.Op.ArithOp -> {v : Language.Stitch.LH.Type.Ty | v == arithType x1}"
93:37-93:39::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
94:26-94:37::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
94:35-94:37::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
95:20-95:41::Language.Stitch.LH.Type.funResTy :: "x1:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | v == funResTy x1}"
95:29-95:41::lq_anf$##7205759403792812012 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e}"
95:39-95:40::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0}"
96:21-96:25::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
97:22-97:27::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TBool}"
108:1-108:14::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
108:15-108:18::ctx :: "[Language.Stitch.LH.Type.Ty]"
108:33-108:50::lq_anf$##7205759403792812136 :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
108:45-108:46::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
108:47-108:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
108:54-108:57::vty :: "{v : Language.Stitch.LH.Type.Ty | v == vty}"
109:31-109:54::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
109:45-109:52::lq_anf$##7205759403792812137 :: "{v : [Language.Stitch.LH.Type.Ty] | v == : t ctx\n                                    && head v == t\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng t) (listElts ctx)\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == t\n                                    && tail v == ctx}"
109:46-109:47::t :: "{v : Language.Stitch.LH.Type.Ty | v == t}"
109:48-109:51::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
109:53-109:54::e :: "{v : Language.Stitch.LH.Check.Exp | v == e\n                                    && numFreeVarsExp v >= 0}"
110:33-110:53::lq_anf$##7205759403792812138 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
110:47-110:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
110:51-110:53::e1 :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
110:57-110:77::lq_anf$##7205759403792812139 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
110:71-110:74::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
110:75-110:77::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && funArgTy (exprType e1) == exprType v\n                                    && numFreeVarsExp v >= 0}"
111:33-111:53::lq_anf$##7205759403792812140 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
111:47-111:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
111:51-111:53::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1\n                                    && numFreeVarsExp v >= 0}"
111:57-111:93::lq_anf$##7205759403792812143 :: "GHC.Types.Bool"
111:71-111:90::lq_anf$##7205759403792812142 :: "{v : [Language.Stitch.LH.Type.Ty] | len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && lqdc##$select v == ctx\n                                    && tail v == ctx}"
111:72-111:85::lq_anf$##7205759403792812141 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
111:82-111:84::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1\n                                    && numFreeVarsExp v >= 0}"
111:86-111:89::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
111:91-111:93::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
112:37-112:57::lq_anf$##7205759403792812144 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
112:51-112:54::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
112:55-112:57::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
112:61-112:81::lq_anf$##7205759403792812145 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
112:75-112:78::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
112:79-112:81::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e2\n                                    && numFreeVarsExp v >= 0}"
113:37-113:57::lq_anf$##7205759403792812146 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
113:51-113:54::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
113:55-113:57::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
113:61-113:81::lq_anf$##7205759403792812147 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
113:75-113:78::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
113:79-113:81::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
113:85-113:105::lq_anf$##7205759403792812148 :: "{v : GHC.Types.Bool | v == checkBindings ctx e3}"
113:99-113:102::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
113:103-113:105::e3 :: "{v : Language.Stitch.LH.Check.Exp | v == e3\n                                    && exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0}"
114:29-114:48::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
114:43-114:46::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
114:47-114:48::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0}"
115:28-115:32::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
116:29-116:33::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
129:1-129:30::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> checkBindings (append x1 x2) x3\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1\n                                                                                                                                                          && numFreeVarsExp x3 <= length (append x1 x2)}"
129:31-129:35::ctx0 :: "[Language.Stitch.LH.Type.Ty]"
129:36-129:40::ctx1 :: "[Language.Stitch.LH.Type.Ty]"
129:41-129:42::e :: "Language.Stitch.LH.Check.Exp"
129:50-129:51::_ :: "{v : Language.Stitch.LH.Check.Exp | v == e\n                                    && numFreeVarsExp v >= 0}"
131:8-131:9::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
131:12-131:28::lq_anf$##7205759403792812333 :: "{v : GHC.Types.Int | v == length ctx0\n                     && v >= 0}"
131:24-131:28::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
131:34-131:70::Language.Stitch.LH.Data.List.elemAtThroughAppend :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | x1 < length v} -> x3:[a] -> {v : () | elemAt x1 (append x2 x3) == elemAt x1 x2} | VV == elemAtThroughAppend}"
131:59-131:60::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
131:61-131:65::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
131:66-131:70::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
132:10-132:17::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
134:5-134:54::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> checkBindings (append x1 x2) x3\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1\n                                                                                                                                                          && numFreeVarsExp x3 <= length (append x1 x2)}"
134:35-134:44::lq_anf$##7205759403792812336 :: "{v : [Language.Stitch.LH.Type.Ty] | v == : ty ctx0\n                                    && head v == ty\n                                    && len v == 1 + len ctx0\n                                    && length v == 1 + length ctx0\n                                    && listElts v == Set_cup (Set_sng ty) (listElts ctx0)\n                                    && lqdc##$select v == ctx0\n                                    && lqdc##$select v == ty\n                                    && tail v == ctx0}"
134:36-134:38::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
134:39-134:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
134:45-134:49::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
134:50-134:54::body :: "{v : Language.Stitch.LH.Check.Exp | v == body\n                                    && numFreeVarsExp v >= 0}"
136:5-136:47::lq_anf$##7205759403792812337 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e1\n                                                  && numFreeVarsExp e1 <= length ctx0\n                                                  && numFreeVarsExp e1 <= length (append ctx0 ctx1)}"
136:35-136:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
136:40-136:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
136:45-136:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
136:50-136:92::lq_anf$##7205759403792812338 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e2\n                                                  && numFreeVarsExp e2 <= length ctx0\n                                                  && numFreeVarsExp e2 <= length (append ctx0 ctx1)}"
136:80-136:84::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
136:85-136:89::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
136:90-136:92::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && funArgTy (exprType e1) == exprType v\n                                    && numFreeVarsExp v >= 0}"
138:5-138:47::lq_anf$##7205759403792812339 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e1\n                                                  && numFreeVarsExp e1 <= length ctx0\n                                                  && numFreeVarsExp e1 <= length (append ctx0 ctx1)}"
138:35-138:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
138:40-138:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
138:45-138:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1\n                                    && numFreeVarsExp v >= 0}"
138:50-138:108::lq_anf$##7205759403792812342 :: "()"
138:80-138:100::lq_anf$##7205759403792812341 :: "{v : [Language.Stitch.LH.Type.Ty] | len v == 1 + len ctx0\n                                    && length v == 1 + length ctx0\n                                    && lqdc##$select v == ctx0\n                                    && tail v == ctx0}"
138:81-138:94::lq_anf$##7205759403792812340 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
138:91-138:93::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1\n                                    && numFreeVarsExp v >= 0}"
138:95-138:99::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
138:101-138:105::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
138:106-138:108::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
140:5-140:47::lq_anf$##7205759403792812343 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e1\n                                                  && numFreeVarsExp e1 <= length ctx0\n                                                  && numFreeVarsExp e1 <= length (append ctx0 ctx1)}"
140:35-140:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
140:40-140:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
140:45-140:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
140:50-140:92::lq_anf$##7205759403792812344 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e2\n                                                  && numFreeVarsExp e2 <= length ctx0\n                                                  && numFreeVarsExp e2 <= length (append ctx0 ctx1)}"
140:80-140:84::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
140:85-140:89::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
140:90-140:92::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e2\n                                    && numFreeVarsExp v >= 0}"
142:5-142:47::lq_anf$##7205759403792812345 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e1\n                                                  && numFreeVarsExp e1 <= length ctx0\n                                                  && numFreeVarsExp e1 <= length (append ctx0 ctx1)}"
142:35-142:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
142:40-142:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
142:45-142:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && v == e1\n                                    && numFreeVarsExp v >= 0}"
143:9-143:51::lq_anf$##7205759403792812346 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e2\n                                                  && numFreeVarsExp e2 <= length ctx0\n                                                  && numFreeVarsExp e2 <= length (append ctx0 ctx1)}"
143:39-143:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
143:44-143:48::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
143:49-143:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && numFreeVarsExp v >= 0}"
144:9-144:51::lq_anf$##7205759403792812348 :: "{v : () | checkBindings ctx0 e3\n          && numFreeVarsExp e3 <= length ctx0 <=> checkBindings (append ctx0 ctx1) e3\n                                                  && numFreeVarsExp e3 <= length ctx0\n                                                  && numFreeVarsExp e3 <= length (append ctx0 ctx1)}"
144:39-144:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
144:44-144:48::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
144:49-144:51::e3 :: "{v : Language.Stitch.LH.Check.Exp | v == e3\n                                    && exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0}"
146:5-146:49::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> checkBindings (append x1 x2) x3\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1\n                                                                                                                                                          && numFreeVarsExp x3 <= length (append x1 x2)}"
146:35-146:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx0\n                                    && len v >= 0\n                                    && length v >= 0}"
146:40-146:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx1\n                                    && len v >= 0\n                                    && length v >= 0}"
146:45-146:49::body :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == body\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0}"
147:13-147:20::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
148:14-148:21::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
155:1-155:15::Language.Stitch.LH.Check.numFreeVarsExp :: "x1:Language.Stitch.LH.Check.Exp -> {VV : GHC.Types.Int | VV == numFreeVarsExp x1\n                                                         && VV >= 0}"
155:28-155:29::v :: "{v' : GHC.Types.Int | v' == v\n                      && v' >= 0}"
155:32-155:33::lq_anf$##7205759403792812351 :: "GHC.Types.Int"
156:31-156:64::Language.Stitch.LH.Data.Nat.minus :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == (if 0 > x1 - x2 then 0 else x1 - x2)}"
156:41-156:62::lq_anf$##7205759403792812352 :: "{v : GHC.Types.Int | v == numFreeVarsExp body\n                     && v >= 0}"
156:57-156:61::body :: "{v : Language.Stitch.LH.Check.Exp | v == body}"
156:63-156:64::lq_anf$##7205759403792812354 :: "GHC.Types.Int"
157:30-157:77::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
157:38-157:57::lq_anf$##7205759403792812355 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
157:54-157:56::e1 :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == e1}"
157:58-157:77::lq_anf$##7205759403792812356 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
157:74-157:76::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2\n                                    && funArgTy (exprType e1) == exprType v}"
159:5-159:66::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
159:13-159:32::lq_anf$##7205759403792812357 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
159:29-159:31::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1}"
159:33-159:66::lq_anf$##7205759403792812361 :: "GHC.Types.Int"
159:44-159:63::lq_anf$##7205759403792812358 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
159:60-159:62::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2}"
159:64-159:65::lq_anf$##7205759403792812360 :: "GHC.Types.Int"
160:34-160:81::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
160:42-160:61::lq_anf$##7205759403792812362 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
160:58-160:60::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e1}"
160:62-160:81::lq_anf$##7205759403792812363 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
160:78-160:80::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e2}"
162:5-162:82::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
162:13-162:62::lq_anf$##7205759403792812366 :: "GHC.Types.Int"
162:22-162:41::lq_anf$##7205759403792812364 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
162:38-162:40::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && v == e1}"
162:42-162:61::lq_anf$##7205759403792812365 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
162:58-162:60::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2}"
162:63-162:82::lq_anf$##7205759403792812367 :: "{v : GHC.Types.Int | v == numFreeVarsExp e3\n                     && v >= 0}"
162:79-162:81::e3 :: "{v : Language.Stitch.LH.Check.Exp | v == e3\n                                    && exprType e2 == exprType v}"
163:29-163:48::Language.Stitch.LH.Check.numFreeVarsExp :: "x1:Language.Stitch.LH.Check.Exp -> {VV : GHC.Types.Int | VV == numFreeVarsExp x1\n                                                         && VV >= 0}"
163:44-163:48::body :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && v == body\n                                    && funArgTy (exprType v) == funResTy (exprType v)}"
164:27-164:28::lq_anf$##7205759403792812368 :: "{v : GHC.Prim.Int# | v == 0}"
165:28-165:29::lq_anf$##7205759403792812369 :: "{v : GHC.Prim.Int# | v == 0}"
178:1-178:6::Language.Stitch.LH.Check.check :: "forall a .\nLanguage.Stitch.LH.Check.Globals -> {VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV == 0} -> (x4:{VV : Language.Stitch.LH.Check.Exp | checkBindings [] VV\n                                                                                                                                               && numFreeVarsExp VV <= length []} -> {t : Language.Stitch.LH.Type.Ty | exprType x4 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)) -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
178:7-178:14::globals :: "Language.Stitch.LH.Check.Globals"
178:17-178:22::lq_anf$##7205759403792812506 :: "{v : [Language.Stitch.LH.Type.Ty] | Set_emp (listElts v)\n                                    && v == []\n                                    && len v == 0\n                                    && length v == 0}"
178:20-178:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && v == []\n                                                  && len v == 0\n                                                  && length v == 0} | VV == []}"
187:5-187:7::go :: "forall a .\nx1:[Language.Stitch.LH.Type.Ty] -> {VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV <= length x1} -> (x4:{VV : Language.Stitch.LH.Check.Exp | checkBindings x1 VV\n                                                                                                                                                      && numFreeVarsExp VV <= length x1} -> {t : Language.Stitch.LH.Type.Ty | exprType x4 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)) -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
187:8-187:11::ctx :: "[Language.Stitch.LH.Type.Ty]"
187:12-187:14::ue :: "{VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV <= length ctx}"
187:15-187:16::f :: "x1:{VV : Language.Stitch.LH.Check.Exp | checkBindings ctx VV\n                                        && numFreeVarsExp VV <= length ctx} -> {t : Language.Stitch.LH.Type.Ty | exprType x1 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
187:24-187:26::_ :: "{v : Language.Stitch.LH.Unchecked.UExp | v == ue\n                                         && numFreeVars v >= 0\n                                         && numFreeVars v <= length ctx}"
188:21-188:23::ty :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
188:26-188:43::_ :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
188:38-188:39::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
188:40-188:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
189:23-189:33::lq_anf$##7205759403792812411 :: "{v : Language.Stitch.LH.Check.Exp | v == Var ty i\n                                    && exprType v == ty\n                                    && lqdc##$select v == i\n                                    && lqdc##$select v == ty\n                                    && numFreeVarsExp v == i + 1}"
189:28-189:30::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty\n                                  && v == elemAt i ctx}"
189:31-189:32::i :: "{v : GHC.Types.Int | v == i\n                     && v >= 0}"
189:34-189:36::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty\n                                  && v == elemAt i ctx}"
191:28-191:53::lq_anf$##7205759403792812412 :: "(GHC.Maybe.Maybe Language.Stitch.LH.Check.TypedExp)"
191:41-191:45::name :: "{v : [GHC.Types.Char] | v == name\n                        && len v >= 0\n                        && length v >= 0}"
191:46-191:53::globals :: "{v : Language.Stitch.LH.Check.Globals | v == globals}"
192:32-192:80::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
192:34-192:78::lq_anf$##7205759403792812418 :: "Language.Stitch.LH.Check.Exp"
192:35-192:36::e :: "{v : Language.Stitch.LH.Check.Exp | checkBindings [] v\n                                    && v == e\n                                    && numFreeVarsExp v >= 0\n                                    && numFreeVarsExp v <= length []}"
192:39-192:77::lq_anf$##7205759403792812417 :: "()"
192:69-192:71::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && v == []\n                                                  && len v == 0\n                                                  && length v == 0} | VV == []}"
192:72-192:75::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
192:76-192:77::e :: "{v : Language.Stitch.LH.Check.Exp | checkBindings [] v\n                                    && v == e\n                                    && numFreeVarsExp v >= 0\n                                    && numFreeVarsExp v <= length []}"
192:79-192:80::t :: "{v : Language.Stitch.LH.Type.Ty | v == t\n                                  && exprType e == v}"
193:20-193:48::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
193:25-193:48::lq_anf$##7205759403792812414 :: "{v : Language.Stitch.LH.Check.TyError | v == OutOfScopeGlobal name\n                                        && OutOfScopeGlobal##lqdc##$select v == name}"
193:43-193:47::name :: "{v : [GHC.Types.Char] | v == name\n                        && len v >= 0\n                        && length v >= 0}"
196:23-196:78::lq_anf$##7205759403792812422 :: "Language.Stitch.LH.Check.Exp -> Language.Stitch.LH.Type.Ty -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
196:26-196:34::lq_anf$##7205759403792812419 :: "{v : [Language.Stitch.LH.Type.Ty] | v == : ty ctx\n                                    && head v == ty\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng ty) (listElts ctx)\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == ty\n                                    && tail v == ctx}"
196:27-196:29::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
196:30-196:33::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
196:35-196:39::body :: "{v : Language.Stitch.LH.Unchecked.UExp | v == body\n                                         && numFreeVars v >= 0}"
196:40-196:78::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
196:42-196:43::r :: "Language.Stitch.LH.Check.Exp"
196:44-196:47::rty :: "Language.Stitch.LH.Type.Ty"
196:53-196:63::lq_anf$##7205759403792812420 :: "{v : Language.Stitch.LH.Check.Exp | v == Lam ty r\n                                    && exprType v == TFun ty (exprType r)\n                                    && lqdc##$select v == r\n                                    && lqdc##$select v == ty\n                                    && numFreeVarsExp v == (if 0 > numFreeVarsExp r - 1 then 0 else numFreeVarsExp r - 1)}"
196:58-196:60::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
196:61-196:62::r :: "{v : Language.Stitch.LH.Check.Exp | v == r\n                                    && numFreeVarsExp v >= 0}"
196:64-196:77::lq_anf$##7205759403792812421 :: "{v : Language.Stitch.LH.Type.Ty | isFunTy v\n                                  && v == TFun ty rty\n                                  && funArgTy v == ty\n                                  && funResTy v == rty}"
196:70-196:72::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
196:73-196:76::rty :: "{v : Language.Stitch.LH.Type.Ty | v == rty}"
199:14-199:17::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
199:18-199:20::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
199:23-199:26::te1 :: "Language.Stitch.LH.Check.Exp"
199:27-199:30::ty1 :: "Language.Stitch.LH.Type.Ty"
199:37-199:40::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
199:41-199:43::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
199:46-199:49::te2 :: "Language.Stitch.LH.Check.Exp"
199:50-199:53::ty2 :: "Language.Stitch.LH.Type.Ty"
199:62-199:65::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
201:18-201:25::farg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == farg_ty}"
201:29-201:32::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
202:17-202:39::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
202:19-202:32::lq_anf$##7205759403792812436 :: "{v : Language.Stitch.LH.Check.Exp | v == App te1 te2\n                                    && e1 v == te1\n                                    && exprType v == funResTy (exprType te1)\n                                    && lqdc##$select v == te2\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2)}"
202:24-202:27::te1 :: "{v : Language.Stitch.LH.Check.Exp | v == te1\n                                    && numFreeVarsExp v >= 0}"
202:28-202:31::te2 :: "{v : Language.Stitch.LH.Check.Exp | v == te2\n                                    && numFreeVarsExp v >= 0}"
202:33-202:39::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
204:17-204:21::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
205:19-205:52::lq_anf$##7205759403792812431 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e2}"
205:31-205:48::lq_anf$##7205759403792812430 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
205:44-205:47::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
205:49-205:51::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
206:19-206:26::farg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == farg_ty}"
207:19-207:22::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
208:19-208:62::lq_anf$##7205759403792812434 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
208:31-208:48::lq_anf$##7205759403792812432 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
208:44-208:47::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
208:49-208:61::lq_anf$##7205759403792812433 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UApp e1 e2\n                                         && lqdc##$select v == e1\n                                         && lqdc##$select v == e2\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)}"
208:55-208:57::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
208:58-208:60::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
209:19-209:75::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
209:24-209:75::lq_anf$##7205759403792812426 :: "{v : Language.Stitch.LH.Check.TyError | NotAFunction##lqdc##$select v == ty1}"
209:38-209:71::lq_anf$##7205759403792812425 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
209:50-209:67::lq_anf$##7205759403792812424 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
209:63-209:66::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
209:68-209:70::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
213:12-213:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
213:16-213:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
213:21-213:24::te1 :: "Language.Stitch.LH.Check.Exp"
213:25-213:28::ty1 :: "Language.Stitch.LH.Type.Ty"
213:35-213:44::lq_anf$##7205759403792812439 :: "{v : [Language.Stitch.LH.Type.Ty] | v == : ty1 ctx\n                                    && head v == ty1\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng ty1) (listElts ctx)\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == ty1\n                                    && tail v == ctx}"
213:36-213:39::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
213:40-213:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
213:45-213:47::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
213:50-213:53::te2 :: "Language.Stitch.LH.Check.Exp"
213:54-213:57::ty2 :: "Language.Stitch.LH.Type.Ty"
214:13-214:26::lq_anf$##7205759403792812440 :: "{v : Language.Stitch.LH.Check.Exp | v == Let te1 te2\n                                    && exprType v == exprType te2\n                                    && lqdc##$select v == te1\n                                    && lqdc##$select v == te2\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > (if 0 > numFreeVarsExp te2 - 1 then 0 else numFreeVarsExp te2 - 1) then numFreeVarsExp te1 else (if 0 > numFreeVarsExp te2 - 1 then 0 else numFreeVarsExp te2 - 1))}"
214:18-214:21::te1 :: "{v : Language.Stitch.LH.Check.Exp | v == te1\n                                    && numFreeVarsExp v >= 0}"
214:22-214:25::te2 :: "{v : Language.Stitch.LH.Check.Exp | v == te2\n                                    && numFreeVarsExp v >= 0}"
214:27-214:30::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
218:12-218:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
218:16-218:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
218:21-218:24::te1 :: "Language.Stitch.LH.Check.Exp"
218:25-218:28::ty1 :: "Language.Stitch.LH.Type.Ty"
218:35-218:38::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
218:39-218:41::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
218:44-218:47::te2 :: "Language.Stitch.LH.Check.Exp"
218:48-218:51::ty2 :: "Language.Stitch.LH.Type.Ty"
219:14-219:17::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
219:21-219:25::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
220:16-220:19::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
220:23-220:27::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
221:15-221:50::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
221:17-221:35::lq_anf$##7205759403792812461 :: "{v : Language.Stitch.LH.Check.Exp | v == Arith te1 op te2\n                                    && exprType v == arithType op\n                                    && lqdc##$select v == op\n                                    && lqdc##$select v == te1\n                                    && lqdc##$select v == te2\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2)}"
221:24-221:27::te1 :: "{v : Language.Stitch.LH.Check.Exp | v == te1\n                                    && numFreeVarsExp v >= 0}"
221:28-221:30::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
221:31-221:34::te2 :: "{v : Language.Stitch.LH.Check.Exp | v == te2\n                                    && numFreeVarsExp v >= 0}"
221:36-221:50::lq_anf$##7205759403792812462 :: "{v : Language.Stitch.LH.Type.Ty | v == arithType op}"
221:47-221:49::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
223:15-223:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
224:17-224:50::lq_anf$##7205759403792812456 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e2}"
224:29-224:46::lq_anf$##7205759403792812455 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
224:42-224:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
224:47-224:49::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
225:17-225:21::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
226:17-226:20::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
227:17-227:65::lq_anf$##7205759403792812459 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
227:29-227:46::lq_anf$##7205759403792812457 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
227:42-227:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
227:47-227:64::lq_anf$##7205759403792812458 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UArith e1 op e2\n                                         && lqdc##$select v == e1\n                                         && lqdc##$select v == e2\n                                         && lqdc##$select v == op\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)}"
227:55-227:57::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
227:58-227:60::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
227:61-227:63::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
229:13-229:17::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
230:15-230:48::lq_anf$##7205759403792812447 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
230:27-230:44::lq_anf$##7205759403792812446 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
230:40-230:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
230:45-230:47::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
231:15-231:19::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
232:15-232:18::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
233:15-233:63::lq_anf$##7205759403792812450 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
233:27-233:44::lq_anf$##7205759403792812448 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
233:40-233:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
233:45-233:62::lq_anf$##7205759403792812449 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UArith e1 op e2\n                                         && lqdc##$select v == e1\n                                         && lqdc##$select v == e2\n                                         && lqdc##$select v == op\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)}"
233:53-233:55::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
233:56-233:58::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
233:59-233:61::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
237:12-237:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
237:16-237:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
237:21-237:24::te1 :: "Language.Stitch.LH.Check.Exp"
237:25-237:28::ty1 :: "Language.Stitch.LH.Type.Ty"
237:35-237:38::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
237:39-237:41::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
237:44-237:47::te2 :: "Language.Stitch.LH.Check.Exp"
237:48-237:51::ty2 :: "Language.Stitch.LH.Type.Ty"
237:58-237:61::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
237:62-237:64::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e3\n                                         && numFreeVars v >= 0}"
237:67-237:70::te3 :: "Language.Stitch.LH.Check.Exp"
237:71-237:74::ty3 :: "Language.Stitch.LH.Type.Ty"
238:14-238:17::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
238:21-238:26::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TBool}"
239:16-239:19::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
239:23-239:26::ty3 :: "{v : Language.Stitch.LH.Type.Ty | v == ty3}"
240:15-240:39::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
240:17-240:35::lq_anf$##7205759403792812483 :: "{v : Language.Stitch.LH.Check.Exp | v == Cond te1 te2 te3\n                                    && a v == te2\n                                    && exprType v == exprType te2\n                                    && lqdc##$select v == te1\n                                    && lqdc##$select v == te3\n                                    && numFreeVarsExp v == (if (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2) > numFreeVarsExp te3 then (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2) else numFreeVarsExp te3)}"
240:23-240:26::te1 :: "{v : Language.Stitch.LH.Check.Exp | v == te1\n                                    && numFreeVarsExp v >= 0}"
240:27-240:30::te2 :: "{v : Language.Stitch.LH.Check.Exp | v == te2\n                                    && numFreeVarsExp v >= 0}"
240:31-240:34::te3 :: "{v : Language.Stitch.LH.Check.Exp | v == te3\n                                    && numFreeVarsExp v >= 0}"
240:36-240:39::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
242:15-242:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
243:17-243:50::lq_anf$##7205759403792812478 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e3}"
243:29-243:46::lq_anf$##7205759403792812477 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
243:42-243:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
243:47-243:49::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e3\n                                         && numFreeVars v >= 0}"
244:17-244:20::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
245:17-245:20::ty3 :: "{v : Language.Stitch.LH.Type.Ty | v == ty3}"
246:17-246:64::lq_anf$##7205759403792812481 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
246:29-246:46::lq_anf$##7205759403792812479 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
246:42-246:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
246:47-246:63::lq_anf$##7205759403792812480 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UCond e1 e2 e3\n                                         && lqdc##$select v == e1\n                                         && lqdc##$select v == e2\n                                         && lqdc##$select v == e3\n                                         && numFreeVars v == (if (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) > numFreeVars e3 then (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) else numFreeVars e3)}"
246:54-246:56::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
246:57-246:59::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
246:60-246:62::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e3\n                                         && numFreeVars v >= 0}"
248:13-248:17::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
249:15-249:48::lq_anf$##7205759403792812469 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
249:27-249:44::lq_anf$##7205759403792812468 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
249:40-249:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
249:45-249:47::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
250:15-250:20::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TBool}"
251:15-251:18::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
252:15-252:62::lq_anf$##7205759403792812472 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
252:27-252:44::lq_anf$##7205759403792812470 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
252:40-252:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
252:45-252:61::lq_anf$##7205759403792812471 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UCond e1 e2 e3\n                                         && lqdc##$select v == e1\n                                         && lqdc##$select v == e2\n                                         && lqdc##$select v == e3\n                                         && numFreeVars v == (if (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) > numFreeVars e3 then (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) else numFreeVars e3)}"
252:52-252:54::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e1\n                                         && numFreeVars v >= 0}"
252:55-252:57::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e2\n                                         && numFreeVars v >= 0}"
252:58-252:60::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e3\n                                         && numFreeVars v >= 0}"
255:20-255:23::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
255:24-255:25::e :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e\n                                         && numFreeVars v >= 0}"
255:28-255:31::te1 :: "Language.Stitch.LH.Check.Exp"
255:32-255:35::ty1 :: "Language.Stitch.LH.Type.Ty"
255:44-255:47::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
257:16-257:22::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
257:26-257:32::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
258:15-258:33::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
258:17-258:26::lq_anf$##7205759403792812502 :: "{v : Language.Stitch.LH.Check.Exp | v == Fix te1\n                                    && exprType v == funResTy (exprType te1)\n                                    && lqdc##$select v == te1\n                                    && numFreeVarsExp v == numFreeVarsExp te1}"
258:22-258:25::te1 :: "{v : Language.Stitch.LH.Check.Exp | v == te1\n                                    && numFreeVarsExp v >= 0}"
258:27-258:33::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
260:15-260:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
261:17-261:49::lq_anf$##7205759403792812495 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e}"
261:29-261:46::lq_anf$##7205759403792812494 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
261:42-261:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
261:47-261:48::e :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e\n                                         && numFreeVars v >= 0}"
262:17-262:37::lq_anf$##7205759403792812496 :: "{v : Language.Stitch.LH.Type.Ty | isFunTy v\n                                  && v == TFun arg_ty arg_ty\n                                  && funArgTy v == arg_ty\n                                  && funResTy v == arg_ty}"
262:23-262:29::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
262:30-262:36::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
263:17-263:37::lq_anf$##7205759403792812497 :: "{v : Language.Stitch.LH.Type.Ty | isFunTy v\n                                  && v == TFun arg_ty res_ty\n                                  && funArgTy v == arg_ty\n                                  && funResTy v == res_ty}"
263:23-263:29::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
263:30-263:36::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
264:17-264:56::lq_anf$##7205759403792812500 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
264:29-264:46::lq_anf$##7205759403792812498 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
264:42-264:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
264:47-264:55::lq_anf$##7205759403792812499 :: "{v : Language.Stitch.LH.Unchecked.UExp | v == UFix e\n                                         && lqdc##$select v == e\n                                         && numFreeVars v == numFreeVars e}"
264:53-264:54::e :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e\n                                         && numFreeVars v >= 0}"
265:17-265:72::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
265:22-265:72::lq_anf$##7205759403792812490 :: "{v : Language.Stitch.LH.Check.TyError | NotAFunction##lqdc##$select v == ty1}"
265:36-265:68::lq_anf$##7205759403792812489 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e}"
265:48-265:65::lq_anf$##7205759403792812488 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
265:61-265:64::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | v == ctx\n                                    && len v >= 0\n                                    && length v >= 0}"
265:66-265:67::e :: "{v : Language.Stitch.LH.Unchecked.UExp | v == e\n                                         && numFreeVars v >= 0}"
268:18-268:33::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
268:20-268:28::lq_anf$##7205759403792812504 :: "{v : Language.Stitch.LH.Check.Exp | v == IntE i\n                                    && exprType v == TInt\n                                    && lqdc##$select v == i\n                                    && numFreeVarsExp v == 0}"
268:26-268:27::i :: "{v : GHC.Types.Int | v == i}"
268:29-268:33::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TInt}"
270:19-270:36::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
270:21-270:30::lq_anf$##7205759403792812505 :: "{v : Language.Stitch.LH.Check.Exp | v == BoolE b\n                                    && exprType v == TBool\n                                    && lqdc##$select v == b\n                                    && numFreeVarsExp v == 0}"
270:28-270:29::b :: "{v : GHC.Types.Bool | v == b}"
270:31-270:36::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | not (isFunTy v)\n                                  && v == TBool}"
278:10-278:24::Language.Stitch.LH.Check.$fPrettyTyError :: "(Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Check.TyError)"
279:3-279:9::$cpretty :: "Language.Stitch.LH.Check.TyError -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
281:7-281:43::lq_anf$##7205759403792812387 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
281:12-281:43::lq_anf$##7205759403792812386 :: "[GHC.Types.Char]"
281:48-281:67::lq_anf$##7205759403792812389 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
281:56-281:67::lq_anf$##7205759403792812388 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
281:62-281:66::name :: "{v : [GHC.Types.Char] | v == name\n                        && len v >= 0\n                        && length v >= 0}"
283:7-283:44::lq_anf$##7205759403792812392 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
283:12-283:44::lq_anf$##7205759403792812391 :: "[GHC.Types.Char]"
284:7-284:36::lq_anf$##7205759403792812394 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
284:15-284:36::lq_anf$##7205759403792812393 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
284:31-284:32::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
284:33-284:35::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
286:7-286:19::lq_anf$##7205759403792812397 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
286:12-286:19::lq_anf$##7205759403792812396 :: "[GHC.Types.Char]"
286:24-286:59::lq_anf$##7205759403792812399 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
286:32-286:59::lq_anf$##7205759403792812398 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
286:48-286:49::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
286:50-286:58::expected :: "{v : Language.Stitch.LH.Type.Ty | v == expected}"
287:7-287:31::lq_anf$##7205759403792812403 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
287:12-287:31::lq_anf$##7205759403792812402 :: "[GHC.Types.Char]"
287:36-287:59::lq_anf$##7205759403792812405 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
287:44-287:59::lq_anf$##7205759403792812404 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
287:52-287:58::actual :: "{v : Language.Stitch.LH.Type.Ty | v == actual}"
288:7-288:26::lq_anf$##7205759403792812407 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
288:23-288:26::ctx :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == ctx}"
291:1-291:15::Language.Stitch.LH.Check.prettyTypedExp :: "Language.Stitch.LH.Unchecked.ScopedUExp -> Language.Stitch.LH.Type.Ty -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:16-291:17::e :: "Language.Stitch.LH.Unchecked.ScopedUExp"
291:18-291:20::ty :: "Language.Stitch.LH.Type.Ty"
291:23-291:31::lq_anf$##7205759403792812378 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:30-291:31::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
291:36-291:44::lq_anf$##7205759403792812381 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:41-291:44::lq_anf$##7205759403792812380 :: "[GHC.Types.Char]"
291:49-291:58::lq_anf$##7205759403792812382 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:56-291:58::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
294:1-294:16::Language.Stitch.LH.Check.inTheExpression :: "Language.Stitch.LH.Unchecked.ScopedUExp -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:17-294:18::e :: "Language.Stitch.LH.Unchecked.ScopedUExp"
294:21-294:45::lq_anf$##7205759403792812372 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:26-294:45::lq_anf$##7205759403792812371 :: "[GHC.Types.Char]"
294:50-294:68::lq_anf$##7205759403792812374 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:58-294:68::lq_anf$##7205759403792812373 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:66-294:67::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
304:1-304:13::Language.Stitch.LH.Check.typedExpType :: "x1:Language.Stitch.LH.Check.TypedExp -> {VV : Language.Stitch.LH.Type.Ty | VV == typedExpType x1}"
304:32-304:34::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
313:1-313:13::Language.Stitch.LH.Check.emptyGlobals :: "Language.Stitch.LH.Check.Globals"
313:24-313:33::_ :: "{VV : forall a b . (Data.Map.Internal.Map a b) | VV == empty}"
318:1-318:14::Language.Stitch.LH.Check.extendGlobals :: "[GHC.Types.Char] -> Language.Stitch.LH.Check.TypedExp -> Language.Stitch.LH.Check.Globals -> Language.Stitch.LH.Check.Globals"
318:15-318:18::var :: "[GHC.Types.Char]"
318:19-318:20::e :: "Language.Stitch.LH.Check.TypedExp"
320:5-320:39::Language.Stitch.LH.Check.Globals :: "x1:(Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp) -> {v : Language.Stitch.LH.Check.Globals | v == Globals x1\n                                                                                                                         && Globals##lqdc##$select v == x1}"
320:13-320:39::lq_anf$##7205759403792812508 :: "(Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp)"
320:25-320:28::var :: "{v : [GHC.Types.Char] | v == var\n                        && len v >= 0\n                        && length v >= 0}"
320:29-320:30::e :: "{v : Language.Stitch.LH.Check.TypedExp | v == e}"
320:31-320:38::globals :: "{v : (Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp) | v == globals}"
325:1-325:13::Language.Stitch.LH.Check.lookupGlobal :: "[GHC.Types.Char] -> Language.Stitch.LH.Check.Globals -> (GHC.Maybe.Maybe Language.Stitch.LH.Check.TypedExp)"
325:14-325:17::var :: "[GHC.Types.Char]"
325:38-325:60::$dOrd_a3ZF :: "{v : (GHC.Classes.Ord [GHC.Types.Char]) | v == $dOrd_a3ZF\n                                          && v == $fOrd[]}"
325:49-325:52::var :: "{v : [GHC.Types.Char] | v == var\n                        && len v >= 0\n                        && length v >= 0}"
325:53-325:60::globals :: "{v : (Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp) | v == globals}"
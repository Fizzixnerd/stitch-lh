1:1-1:1::Language.Stitch.LH.Check.$trModule :: "GHC.Types.Module"
70:10-70:26::Language.Stitch.LH.Check.$fPrettyScopedExp :: "(Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Check.ScopedExp)"
71:3-71:9::$cpretty :: "Language.Stitch.LH.Check.ScopedExp -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
71:28-71:64::Language.Stitch.LH.Unchecked.$fPrettyScopedUExp :: "{v : (Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Unchecked.ScopedUExp) | v == $fPrettyScopedUExp}"
71:35-71:64::lq_anf$##7205759403792813151 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | n v == n}"
71:47-71:48::n :: "{v : GHC.Types.Int | v >= 0\n                     && v == n}"
71:49-71:63::lq_anf$##7205759403792813150 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
71:61-71:62::e :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v <= n\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
75:1-75:11::Language.Stitch.LH.Check.uncheckExp :: "x1:Language.Stitch.LH.Check.Exp -> {uexp : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp x1 == numFreeVars uexp}"
76:14-76:20::Language.Stitch.LH.Unchecked.UVar :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : Language.Stitch.LH.Unchecked.UExp | UVar##lqdc##$select v == x1\n                                                                            && numFreeVars v == x1 + 1\n                                                                            && v == UVar x1}"
76:19-76:20::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
77:15-77:37::Language.Stitch.LH.Unchecked.ULam :: "x1:Language.Stitch.LH.Type.Ty -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | ULam##lqdc##$select v == x2\n                                                                                                                  && ULam##lqdc##$select v == x1\n                                                                                                                  && numFreeVars v == (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1)\n                                                                                                                  && v == ULam x1 x2}"
77:20-77:22::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
77:23-77:37::lq_anf$##7205759403792812668 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
77:35-77:36::e :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e}"
78:16-78:52::Language.Stitch.LH.Unchecked.UApp :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | UApp##lqdc##$select v == x2\n                                                                                                                         && UApp##lqdc##$select v == x1\n                                                                                                                         && numFreeVars v == (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2)\n                                                                                                                         && v == UApp x1 x2}"
78:21-78:36::lq_anf$##7205759403792812669 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
78:33-78:35::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
78:37-78:52::lq_anf$##7205759403792812670 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
78:49-78:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
79:16-79:52::Language.Stitch.LH.Unchecked.ULet :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | ULet##lqdc##$select v == x2\n                                                                                                                         && ULet##lqdc##$select v == x1\n                                                                                                                         && numFreeVars v == (if numFreeVars x1 > (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1) then numFreeVars x1 else (if 0 > numFreeVars x2 - 1 then 0 else numFreeVars x2 - 1))\n                                                                                                                         && v == ULet x1 x2}"
79:21-79:36::lq_anf$##7205759403792812671 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
79:33-79:35::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
79:37-79:52::lq_anf$##7205759403792812672 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
79:49-79:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
80:21-80:62::Language.Stitch.LH.Unchecked.UArith :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Op.ArithOp -> x3:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | UArith##lqdc##$select v == x3\n                                                                                                                                                             && UArith##lqdc##$select v == x2\n                                                                                                                                                             && UArith##lqdc##$select v == x1\n                                                                                                                                                             && numFreeVars v == (if numFreeVars x1 > numFreeVars x3 then numFreeVars x1 else numFreeVars x3)\n                                                                                                                                                             && v == UArith x1 x2 x3}"
80:28-80:43::lq_anf$##7205759403792812673 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
80:40-80:42::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
80:44-80:46::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
80:47-80:62::lq_anf$##7205759403792812674 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
80:59-80:61::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e2}"
81:20-81:73::Language.Stitch.LH.Unchecked.UCond :: "x1:Language.Stitch.LH.Unchecked.UExp -> x2:Language.Stitch.LH.Unchecked.UExp -> x3:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | UCond##lqdc##$select v == x3\n                                                                                                                                                                 && UCond##lqdc##$select v == x2\n                                                                                                                                                                 && UCond##lqdc##$select v == x1\n                                                                                                                                                                 && numFreeVars v == (if (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2) > numFreeVars x3 then (if numFreeVars x1 > numFreeVars x2 then numFreeVars x1 else numFreeVars x2) else numFreeVars x3)\n                                                                                                                                                                 && v == UCond x1 x2 x3}"
81:26-81:41::lq_anf$##7205759403792812675 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e1 == numFreeVars v}"
81:38-81:40::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
81:42-81:57::lq_anf$##7205759403792812676 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e2 == numFreeVars v}"
81:54-81:56::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
81:58-81:73::lq_anf$##7205759403792812677 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e3 == numFreeVars v}"
81:70-81:72::e3 :: "{v : Language.Stitch.LH.Check.Exp | exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e3}"
82:12-82:31::Language.Stitch.LH.Unchecked.UFix :: "x1:Language.Stitch.LH.Unchecked.UExp -> {v : Language.Stitch.LH.Unchecked.UExp | UFix##lqdc##$select v == x1\n                                                                                 && numFreeVars v == numFreeVars x1\n                                                                                 && v == UFix x1}"
82:17-82:31::lq_anf$##7205759403792812678 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVarsExp e == numFreeVars v}"
82:29-82:30::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
83:13-83:20::Language.Stitch.LH.Unchecked.UIntE :: "x1:GHC.Types.Int -> {v : Language.Stitch.LH.Unchecked.UExp | UIntE##lqdc##$select v == x1\n                                                             && numFreeVars v == 0\n                                                             && v == UIntE x1}"
83:19-83:20::i :: "{v : GHC.Types.Int | v == i}"
84:14-84:22::Language.Stitch.LH.Unchecked.UBoolE :: "x1:GHC.Types.Bool -> {v : Language.Stitch.LH.Unchecked.UExp | UBoolE##lqdc##$select v == x1\n                                                              && numFreeVars v == 0\n                                                              && v == UBoolE x1}"
84:21-84:22::b :: "{v : GHC.Types.Bool | v == b}"
88:1-88:9::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
88:23-88:25::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
89:23-89:43::Language.Stitch.LH.Type.TFun :: "x1:Language.Stitch.LH.Type.Ty -> x2:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | funResTy v == x2\n                                                                                                    && funArgTy v == x1\n                                                                                                    && (isFunTy v <=> true)\n                                                                                                    && v == TFun x1 x2}"
89:28-89:30::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
89:31-89:43::lq_anf$##7205759403792812680 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e}"
89:41-89:42::e :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e}"
90:23-90:45::Language.Stitch.LH.Type.funResTy :: "x1:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | v == funResTy x1}"
90:32-90:45::lq_anf$##7205759403792812681 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
90:42-90:44::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
91:23-91:34::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
91:32-91:34::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
92:27-92:39::Language.Stitch.LH.Op.arithType :: "x1:Language.Stitch.LH.Op.ArithOp -> {v : Language.Stitch.LH.Type.Ty | v == arithType x1}"
92:37-92:39::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
93:26-93:37::Language.Stitch.LH.Check.exprType :: "x1:Language.Stitch.LH.Check.Exp -> {VV : Language.Stitch.LH.Type.Ty | VV == exprType x1}"
93:35-93:37::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
94:20-94:41::Language.Stitch.LH.Type.funResTy :: "x1:Language.Stitch.LH.Type.Ty -> {v : Language.Stitch.LH.Type.Ty | v == funResTy x1}"
94:29-94:41::lq_anf$##7205759403792812682 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e}"
94:39-94:40::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
95:21-95:25::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
96:22-96:27::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TBool}"
107:1-107:14::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
107:15-107:18::ctx :: "[Language.Stitch.LH.Type.Ty]"
107:33-107:50::lq_anf$##7205759403792812806 :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
107:45-107:46::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
107:47-107:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
107:54-107:57::vty :: "{v : Language.Stitch.LH.Type.Ty | v == vty}"
108:31-108:54::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
108:45-108:52::lq_anf$##7205759403792812807 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx\n                                    && head v == t\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == t\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng t) (listElts ctx)\n                                    && v == : t ctx}"
108:46-108:47::t :: "{v : Language.Stitch.LH.Type.Ty | v == t}"
108:48-108:51::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
108:53-108:54::e :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e}"
109:33-109:53::lq_anf$##7205759403792812808 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
109:47-109:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
109:51-109:53::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
109:57-109:77::lq_anf$##7205759403792812809 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
109:71-109:74::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
109:75-109:77::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
110:33-110:53::lq_anf$##7205759403792812810 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
110:47-110:50::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
110:51-110:53::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
110:57-110:93::lq_anf$##7205759403792812813 :: "GHC.Types.Bool"
110:71-110:90::lq_anf$##7205759403792812812 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx\n                                    && lqdc##$select v == ctx\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx}"
110:72-110:85::lq_anf$##7205759403792812811 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
110:82-110:84::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
110:86-110:89::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
110:91-110:93::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
111:37-111:57::lq_anf$##7205759403792812814 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
111:51-111:54::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
111:55-111:57::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
111:61-111:81::lq_anf$##7205759403792812815 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
111:75-111:78::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
111:79-111:81::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e2}"
112:37-112:57::lq_anf$##7205759403792812816 :: "{v : GHC.Types.Bool | v == checkBindings ctx e1}"
112:51-112:54::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
112:55-112:57::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
112:61-112:81::lq_anf$##7205759403792812817 :: "{v : GHC.Types.Bool | v == checkBindings ctx e2}"
112:75-112:78::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
112:79-112:81::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
112:85-112:105::lq_anf$##7205759403792812818 :: "{v : GHC.Types.Bool | v == checkBindings ctx e3}"
112:99-112:102::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
112:103-112:105::e3 :: "{v : Language.Stitch.LH.Check.Exp | exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e3}"
113:29-113:48::Language.Stitch.LH.Check.checkBindings :: "x1:[Language.Stitch.LH.Type.Ty] -> {e : Language.Stitch.LH.Check.Exp | numFreeVarsExp e <= length x1} -> GHC.Types.Bool"
113:43-113:46::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
113:47-113:48::e :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
114:28-114:32::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
115:29-115:33::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
128:1-128:30::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> (checkBindings (append x1 x2) x3\n                                                                                                                                                           && numFreeVarsExp x3 <= length (append x1 x2))\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1}"
128:31-128:35::ctx0 :: "[Language.Stitch.LH.Type.Ty]"
128:36-128:40::ctx1 :: "[Language.Stitch.LH.Type.Ty]"
128:41-128:42::e :: "Language.Stitch.LH.Check.Exp"
128:50-128:51::_ :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e}"
130:8-130:9::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
130:12-130:28::lq_anf$##7205759403792813107 :: "{v : GHC.Types.Int | v == length ctx0\n                     && v >= 0}"
130:24-130:28::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
130:34-130:70::Language.Stitch.LH.Data.List.elemAtThroughAppend :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | x1 < length v} -> x3:[a] -> {v : () | elemAt x1 (append x2 x3) == elemAt x1 x2} | VV == elemAtThroughAppend}"
130:59-130:60::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
130:61-130:65::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
130:66-130:70::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
131:10-131:17::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
133:5-133:54::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> (checkBindings (append x1 x2) x3\n                                                                                                                                                           && numFreeVarsExp x3 <= length (append x1 x2))\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1}"
133:35-133:44::lq_anf$##7205759403792813110 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx0\n                                    && head v == ty\n                                    && lqdc##$select v == ctx0\n                                    && lqdc##$select v == ty\n                                    && len v == 1 + len ctx0\n                                    && length v == 1 + length ctx0\n                                    && listElts v == Set_cup (Set_sng ty) (listElts ctx0)\n                                    && v == : ty ctx0}"
133:36-133:38::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
133:39-133:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
133:45-133:49::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
133:50-133:54::body :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == body}"
135:5-135:47::lq_anf$##7205759403792813111 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e1\n                                                   && numFreeVarsExp e1 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e1 <= length ctx0}"
135:35-135:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
135:40-135:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
135:45-135:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
135:50-135:92::lq_anf$##7205759403792813112 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e2\n                                                   && numFreeVarsExp e2 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e2 <= length ctx0}"
135:80-135:84::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
135:85-135:89::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
135:90-135:92::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
137:5-137:47::lq_anf$##7205759403792813113 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e1\n                                                   && numFreeVarsExp e1 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e1 <= length ctx0}"
137:35-137:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
137:40-137:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
137:45-137:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
137:50-137:108::lq_anf$##7205759403792813116 :: "()"
137:80-137:100::lq_anf$##7205759403792813115 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx0\n                                    && lqdc##$select v == ctx0\n                                    && len v == 1 + len ctx0\n                                    && length v == 1 + length ctx0}"
137:81-137:94::lq_anf$##7205759403792813114 :: "{v : Language.Stitch.LH.Type.Ty | v == exprType e1}"
137:91-137:93::e1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e1}"
137:95-137:99::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
137:101-137:105::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
137:106-137:108::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
139:5-139:47::lq_anf$##7205759403792813117 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e1\n                                                   && numFreeVarsExp e1 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e1 <= length ctx0}"
139:35-139:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
139:40-139:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
139:45-139:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
139:50-139:92::lq_anf$##7205759403792813118 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e2\n                                                   && numFreeVarsExp e2 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e2 <= length ctx0}"
139:80-139:84::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
139:85-139:89::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
139:90-139:92::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e2}"
141:5-141:47::lq_anf$##7205759403792813119 :: "{v : () | checkBindings ctx0 e1\n          && numFreeVarsExp e1 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e1\n                                                   && numFreeVarsExp e1 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e1 <= length ctx0}"
141:35-141:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
141:40-141:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
141:45-141:47::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e1}"
142:9-142:51::lq_anf$##7205759403792813120 :: "{v : () | checkBindings ctx0 e2\n          && numFreeVarsExp e2 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e2\n                                                   && numFreeVarsExp e2 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e2 <= length ctx0}"
142:39-142:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
142:44-142:48::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
142:49-142:51::e2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == e2}"
143:9-143:51::lq_anf$##7205759403792813122 :: "{v : () | checkBindings ctx0 e3\n          && numFreeVarsExp e3 <= length ctx0 <=> (checkBindings (append ctx0 ctx1) e3\n                                                   && numFreeVarsExp e3 <= length (append ctx0 ctx1))\n                                                  && numFreeVarsExp e3 <= length ctx0}"
143:39-143:43::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
143:44-143:48::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
143:49-143:51::e3 :: "{v : Language.Stitch.LH.Check.Exp | exprType e2 == exprType v\n                                    && numFreeVarsExp v >= 0\n                                    && v == e3}"
145:5-145:49::Language.Stitch.LH.Check.aClosedExpIsValidInAnyContext :: "x1:[Language.Stitch.LH.Type.Ty] -> x2:[Language.Stitch.LH.Type.Ty] -> x3:Language.Stitch.LH.Check.Exp -> {VV : () | checkBindings x1 x3\n                                                                                                                    && numFreeVarsExp x3 <= length x1 <=> (checkBindings (append x1 x2) x3\n                                                                                                                                                           && numFreeVarsExp x3 <= length (append x1 x2))\n                                                                                                                                                          && numFreeVarsExp x3 <= length x1}"
145:35-145:39::ctx0 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx0}"
145:40-145:44::ctx1 :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx1}"
145:45-145:49::body :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && numFreeVarsExp v >= 0\n                                    && v == body}"
146:13-146:20::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
147:14-147:21::Language.Haskell.Liquid.ProofCombinators.trivial :: "{v : () | v == trivial}"
154:1-154:15::Language.Stitch.LH.Check.numFreeVarsExp :: "x1:Language.Stitch.LH.Check.Exp -> {VV : GHC.Types.Int | VV == numFreeVarsExp x1\n                                                         && VV >= 0}"
154:28-154:29::v :: "{v' : GHC.Types.Int | v' >= 0\n                      && v' == v}"
154:32-154:33::lq_anf$##7205759403792813125 :: "GHC.Types.Int"
155:31-155:64::Language.Stitch.LH.Data.Nat.minus :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == (if 0 > x1 - x2 then 0 else x1 - x2)}"
155:41-155:62::lq_anf$##7205759403792813126 :: "{v : GHC.Types.Int | v == numFreeVarsExp body\n                     && v >= 0}"
155:57-155:61::body :: "{v : Language.Stitch.LH.Check.Exp | v == body}"
155:63-155:64::lq_anf$##7205759403792813128 :: "GHC.Types.Int"
156:30-156:77::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
156:38-156:57::lq_anf$##7205759403792813129 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
156:54-156:56::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1}"
156:58-156:77::lq_anf$##7205759403792813130 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
156:74-156:76::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2}"
158:5-158:66::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
158:13-158:32::lq_anf$##7205759403792813131 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
158:29-158:31::e1 :: "{v : Language.Stitch.LH.Check.Exp | v == e1}"
158:33-158:66::lq_anf$##7205759403792813135 :: "GHC.Types.Int"
158:44-158:63::lq_anf$##7205759403792813132 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
158:60-158:62::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2}"
158:64-158:65::lq_anf$##7205759403792813134 :: "GHC.Types.Int"
159:34-159:81::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
159:42-159:61::lq_anf$##7205759403792813136 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
159:58-159:60::e1 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e1}"
159:62-159:81::lq_anf$##7205759403792813137 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
159:78-159:80::e2 :: "{v : Language.Stitch.LH.Check.Exp | TInt == exprType v\n                                    && v == e2}"
161:5-161:82::GHC.Classes.$fOrdInt :: "{v : (GHC.Classes.Ord GHC.Types.Int) | v == $fOrdInt}"
161:13-161:62::lq_anf$##7205759403792813140 :: "GHC.Types.Int"
161:22-161:41::lq_anf$##7205759403792813138 :: "{v : GHC.Types.Int | v == numFreeVarsExp e1\n                     && v >= 0}"
161:38-161:40::e1 :: "{v : Language.Stitch.LH.Check.Exp | TBool == exprType v\n                                    && v == e1}"
161:42-161:61::lq_anf$##7205759403792813139 :: "{v : GHC.Types.Int | v == numFreeVarsExp e2\n                     && v >= 0}"
161:58-161:60::e2 :: "{v : Language.Stitch.LH.Check.Exp | v == e2}"
161:63-161:82::lq_anf$##7205759403792813141 :: "{v : GHC.Types.Int | v == numFreeVarsExp e3\n                     && v >= 0}"
161:79-161:81::e3 :: "{v : Language.Stitch.LH.Check.Exp | exprType e2 == exprType v\n                                    && v == e3}"
162:29-162:48::Language.Stitch.LH.Check.numFreeVarsExp :: "x1:Language.Stitch.LH.Check.Exp -> {VV : GHC.Types.Int | VV == numFreeVarsExp x1\n                                                         && VV >= 0}"
162:44-162:48::body :: "{v : Language.Stitch.LH.Check.Exp | isFunTy (exprType v)\n                                    && funArgTy (exprType v) == funResTy (exprType v)\n                                    && v == body}"
163:27-163:28::lq_anf$##7205759403792813142 :: "{v : GHC.Prim.Int# | v == 0}"
164:28-164:29::lq_anf$##7205759403792813143 :: "{v : GHC.Prim.Int# | v == 0}"
177:1-177:6::Language.Stitch.LH.Check.check :: "forall a .\nLanguage.Stitch.LH.Check.Globals -> {VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV == 0} -> (x4:{VV : Language.Stitch.LH.Check.Exp | checkBindings [] VV\n                                                                                                                                               && numFreeVarsExp VV <= length []} -> {t : Language.Stitch.LH.Type.Ty | exprType x4 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)) -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
177:7-177:14::globals :: "Language.Stitch.LH.Check.Globals"
177:17-177:22::lq_anf$##7205759403792813280 :: "{v : [Language.Stitch.LH.Type.Ty] | len v == 0\n                                    && length v == 0\n                                    && Set_emp (listElts v)\n                                    && v == []}"
177:20-177:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && length v == 0\n                                                  && Set_emp (listElts v)\n                                                  && v == []} | VV == []}"
186:5-186:7::go :: "forall a .\nx1:[Language.Stitch.LH.Type.Ty] -> {VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV <= length x1} -> (x4:{VV : Language.Stitch.LH.Check.Exp | checkBindings x1 VV\n                                                                                                                                                      && numFreeVarsExp VV <= length x1} -> {t : Language.Stitch.LH.Type.Ty | exprType x4 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)) -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
186:8-186:11::ctx :: "[Language.Stitch.LH.Type.Ty]"
186:12-186:14::ue :: "{VV : Language.Stitch.LH.Unchecked.UExp | numFreeVars VV <= length ctx}"
186:15-186:16::f :: "x1:{VV : Language.Stitch.LH.Check.Exp | checkBindings ctx VV\n                                        && numFreeVarsExp VV <= length ctx} -> {t : Language.Stitch.LH.Type.Ty | exprType x1 == t} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
186:24-186:26::_ :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v <= length ctx\n                                         && numFreeVars v >= 0\n                                         && v == ue}"
187:21-187:23::ty :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
187:26-187:43::_ :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx}"
187:38-187:39::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
187:40-187:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
188:23-188:33::lq_anf$##7205759403792813185 :: "{v : Language.Stitch.LH.Check.Exp | varNat v == i\n                                    && varTyp v == ty\n                                    && numFreeVarsExp v == i + 1\n                                    && exprType v == ty\n                                    && v == Var ty i}"
188:28-188:30::ty :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx\n                                  && v == ty}"
188:31-188:32::i :: "{v : GHC.Types.Int | v >= 0\n                     && v == i}"
188:34-188:36::ty :: "{v : Language.Stitch.LH.Type.Ty | v == elemAt i ctx\n                                  && v == ty}"
190:28-190:53::lq_anf$##7205759403792813186 :: "(GHC.Maybe.Maybe Language.Stitch.LH.Check.TypedExp)"
190:41-190:45::name :: "{v : [GHC.Types.Char] | len v >= 0\n                        && length v >= 0\n                        && v == name}"
190:46-190:53::globals :: "{v : Language.Stitch.LH.Check.Globals | v == globals}"
191:32-191:80::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
191:34-191:78::lq_anf$##7205759403792813192 :: "Language.Stitch.LH.Check.Exp"
191:35-191:36::e :: "{v : Language.Stitch.LH.Check.Exp | checkBindings [] v\n                                    && numFreeVarsExp v <= length []\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
191:39-191:77::lq_anf$##7205759403792813191 :: "()"
191:69-191:71::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && length v == 0\n                                                  && Set_emp (listElts v)\n                                                  && v == []} | VV == []}"
191:72-191:75::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
191:76-191:77::e :: "{v : Language.Stitch.LH.Check.Exp | checkBindings [] v\n                                    && numFreeVarsExp v <= length []\n                                    && numFreeVarsExp v >= 0\n                                    && v == e}"
191:79-191:80::t :: "{v : Language.Stitch.LH.Type.Ty | exprType e == v\n                                  && v == t}"
192:20-192:48::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
192:25-192:48::lq_anf$##7205759403792813188 :: "{v : Language.Stitch.LH.Check.TyError | OutOfScopeGlobal##lqdc##$select v == name\n                                        && v == OutOfScopeGlobal name}"
192:43-192:47::name :: "{v : [GHC.Types.Char] | len v >= 0\n                        && length v >= 0\n                        && v == name}"
195:23-195:78::lq_anf$##7205759403792813196 :: "Language.Stitch.LH.Check.Exp -> Language.Stitch.LH.Type.Ty -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
195:26-195:34::lq_anf$##7205759403792813193 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx\n                                    && head v == ty\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == ty\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng ty) (listElts ctx)\n                                    && v == : ty ctx}"
195:27-195:29::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
195:30-195:33::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
195:35-195:39::body :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == body}"
195:40-195:78::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
195:42-195:43::r :: "Language.Stitch.LH.Check.Exp"
195:44-195:47::rty :: "Language.Stitch.LH.Type.Ty"
195:53-195:63::lq_anf$##7205759403792813194 :: "{v : Language.Stitch.LH.Check.Exp | lamBdy v == r\n                                    && lamTyp v == ty\n                                    && numFreeVarsExp v == (if 0 > numFreeVarsExp r - 1 then 0 else numFreeVarsExp r - 1)\n                                    && exprType v == TFun ty (exprType r)\n                                    && v == Lam ty r}"
195:58-195:60::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
195:61-195:62::r :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == r}"
195:64-195:77::lq_anf$##7205759403792813195 :: "{v : Language.Stitch.LH.Type.Ty | funResTy v == rty\n                                  && funArgTy v == ty\n                                  && (isFunTy v <=> true)\n                                  && v == TFun ty rty}"
195:70-195:72::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
195:73-195:76::rty :: "{v : Language.Stitch.LH.Type.Ty | v == rty}"
198:14-198:17::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
198:18-198:20::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
198:23-198:26::te1 :: "Language.Stitch.LH.Check.Exp"
198:27-198:30::ty1 :: "Language.Stitch.LH.Type.Ty"
198:37-198:40::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
198:41-198:43::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
198:46-198:49::te2 :: "Language.Stitch.LH.Check.Exp"
198:50-198:53::ty2 :: "Language.Stitch.LH.Type.Ty"
198:62-198:65::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
200:18-200:25::farg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == farg_ty}"
200:29-200:32::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
201:17-201:39::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
201:19-201:32::lq_anf$##7205759403792813210 :: "{v : Language.Stitch.LH.Check.Exp | appArg v == te2\n                                    && appFun v == te1\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2)\n                                    && exprType v == funResTy (exprType te1)\n                                    && v == App te1 te2}"
201:24-201:27::te1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te1}"
201:28-201:31::te2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te2}"
201:33-201:39::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
203:17-203:21::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
204:19-204:52::lq_anf$##7205759403792813205 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e2}"
204:31-204:48::lq_anf$##7205759403792813204 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
204:44-204:47::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
204:49-204:51::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
205:19-205:26::farg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == farg_ty}"
206:19-206:22::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
207:19-207:62::lq_anf$##7205759403792813208 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
207:31-207:48::lq_anf$##7205759403792813206 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
207:44-207:47::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
207:49-207:61::lq_anf$##7205759403792813207 :: "{v : Language.Stitch.LH.Unchecked.UExp | UApp##lqdc##$select v == e2\n                                         && UApp##lqdc##$select v == e1\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)\n                                         && v == UApp e1 e2}"
207:55-207:57::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
207:58-207:60::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
208:19-208:75::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
208:24-208:75::lq_anf$##7205759403792813200 :: "{v : Language.Stitch.LH.Check.TyError | NotAFunction##lqdc##$select v == ty1}"
208:38-208:71::lq_anf$##7205759403792813199 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
208:50-208:67::lq_anf$##7205759403792813198 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
208:63-208:66::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
208:68-208:70::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
212:12-212:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
212:16-212:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
212:21-212:24::te1 :: "Language.Stitch.LH.Check.Exp"
212:25-212:28::ty1 :: "Language.Stitch.LH.Type.Ty"
212:35-212:44::lq_anf$##7205759403792813213 :: "{v : [Language.Stitch.LH.Type.Ty] | tail v == ctx\n                                    && head v == ty1\n                                    && lqdc##$select v == ctx\n                                    && lqdc##$select v == ty1\n                                    && len v == 1 + len ctx\n                                    && length v == 1 + length ctx\n                                    && listElts v == Set_cup (Set_sng ty1) (listElts ctx)\n                                    && v == : ty1 ctx}"
212:36-212:39::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
212:40-212:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
212:45-212:47::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
212:50-212:53::te2 :: "Language.Stitch.LH.Check.Exp"
212:54-212:57::ty2 :: "Language.Stitch.LH.Type.Ty"
213:13-213:26::lq_anf$##7205759403792813214 :: "{v : Language.Stitch.LH.Check.Exp | letBdy v == te2\n                                    && letExp v == te1\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > (if 0 > numFreeVarsExp te2 - 1 then 0 else numFreeVarsExp te2 - 1) then numFreeVarsExp te1 else (if 0 > numFreeVarsExp te2 - 1 then 0 else numFreeVarsExp te2 - 1))\n                                    && exprType v == exprType te2\n                                    && v == Let te1 te2}"
213:18-213:21::te1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te1}"
213:22-213:25::te2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te2}"
213:27-213:30::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
217:12-217:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
217:16-217:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
217:21-217:24::te1 :: "Language.Stitch.LH.Check.Exp"
217:25-217:28::ty1 :: "Language.Stitch.LH.Type.Ty"
217:35-217:38::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
217:39-217:41::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
217:44-217:47::te2 :: "Language.Stitch.LH.Check.Exp"
217:48-217:51::ty2 :: "Language.Stitch.LH.Type.Ty"
218:14-218:17::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
218:21-218:25::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
219:16-219:19::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
219:23-219:27::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
220:15-220:50::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
220:17-220:35::lq_anf$##7205759403792813235 :: "{v : Language.Stitch.LH.Check.Exp | ariRhs v == te2\n                                    && ariOp v == op\n                                    && ariLhs v == te1\n                                    && numFreeVarsExp v == (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2)\n                                    && exprType v == arithType op\n                                    && v == Arith te1 op te2}"
220:24-220:27::te1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te1}"
220:28-220:30::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
220:31-220:34::te2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te2}"
220:36-220:50::lq_anf$##7205759403792813236 :: "{v : Language.Stitch.LH.Type.Ty | v == arithType op}"
220:47-220:49::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
222:15-222:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
223:17-223:50::lq_anf$##7205759403792813230 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e2}"
223:29-223:46::lq_anf$##7205759403792813229 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
223:42-223:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
223:47-223:49::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
224:17-224:21::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
225:17-225:20::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
226:17-226:65::lq_anf$##7205759403792813233 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
226:29-226:46::lq_anf$##7205759403792813231 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
226:42-226:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
226:47-226:64::lq_anf$##7205759403792813232 :: "{v : Language.Stitch.LH.Unchecked.UExp | UArith##lqdc##$select v == e2\n                                         && UArith##lqdc##$select v == op\n                                         && UArith##lqdc##$select v == e1\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)\n                                         && v == UArith e1 op e2}"
226:55-226:57::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
226:58-226:60::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
226:61-226:63::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
228:13-228:17::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
229:15-229:48::lq_anf$##7205759403792813221 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
229:27-229:44::lq_anf$##7205759403792813220 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
229:40-229:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
229:45-229:47::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
230:15-230:19::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
231:15-231:18::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
232:15-232:63::lq_anf$##7205759403792813224 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
232:27-232:44::lq_anf$##7205759403792813222 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
232:40-232:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
232:45-232:62::lq_anf$##7205759403792813223 :: "{v : Language.Stitch.LH.Unchecked.UExp | UArith##lqdc##$select v == e2\n                                         && UArith##lqdc##$select v == op\n                                         && UArith##lqdc##$select v == e1\n                                         && numFreeVars v == (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2)\n                                         && v == UArith e1 op e2}"
232:53-232:55::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
232:56-232:58::op :: "{v : Language.Stitch.LH.Op.ArithOp | arithType v == TBool\n                                     || arithType v == TInt\n                                     && v == op}"
232:59-232:61::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
236:12-236:15::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
236:16-236:18::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
236:21-236:24::te1 :: "Language.Stitch.LH.Check.Exp"
236:25-236:28::ty1 :: "Language.Stitch.LH.Type.Ty"
236:35-236:38::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
236:39-236:41::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
236:44-236:47::te2 :: "Language.Stitch.LH.Check.Exp"
236:48-236:51::ty2 :: "Language.Stitch.LH.Type.Ty"
236:58-236:61::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
236:62-236:64::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e3}"
236:67-236:70::te3 :: "Language.Stitch.LH.Check.Exp"
236:71-236:74::ty3 :: "Language.Stitch.LH.Type.Ty"
237:14-237:17::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
237:21-237:26::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TBool}"
238:16-238:19::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
238:23-238:26::ty3 :: "{v : Language.Stitch.LH.Type.Ty | v == ty3}"
239:15-239:39::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
239:17-239:35::lq_anf$##7205759403792813257 :: "{v : Language.Stitch.LH.Check.Exp | conAnt v == te3\n                                    && conCon v == te2\n                                    && conPrc v == te1\n                                    && numFreeVarsExp v == (if (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2) > numFreeVarsExp te3 then (if numFreeVarsExp te1 > numFreeVarsExp te2 then numFreeVarsExp te1 else numFreeVarsExp te2) else numFreeVarsExp te3)\n                                    && exprType v == exprType te2\n                                    && v == Cond te1 te2 te3}"
239:23-239:26::te1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te1}"
239:27-239:30::te2 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te2}"
239:31-239:34::te3 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te3}"
239:36-239:39::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
241:15-241:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
242:17-242:50::lq_anf$##7205759403792813252 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e3}"
242:29-242:46::lq_anf$##7205759403792813251 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
242:42-242:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
242:47-242:49::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e3}"
243:17-243:20::ty2 :: "{v : Language.Stitch.LH.Type.Ty | v == ty2}"
244:17-244:20::ty3 :: "{v : Language.Stitch.LH.Type.Ty | v == ty3}"
245:17-245:64::lq_anf$##7205759403792813255 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
245:29-245:46::lq_anf$##7205759403792813253 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
245:42-245:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
245:47-245:63::lq_anf$##7205759403792813254 :: "{v : Language.Stitch.LH.Unchecked.UExp | UCond##lqdc##$select v == e3\n                                         && UCond##lqdc##$select v == e2\n                                         && UCond##lqdc##$select v == e1\n                                         && numFreeVars v == (if (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) > numFreeVars e3 then (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) else numFreeVars e3)\n                                         && v == UCond e1 e2 e3}"
245:54-245:56::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
245:57-245:59::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
245:60-245:62::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e3}"
247:13-247:17::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
248:15-248:48::lq_anf$##7205759403792813243 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e1}"
248:27-248:44::lq_anf$##7205759403792813242 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
248:40-248:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
248:45-248:47::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
249:15-249:20::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TBool}"
250:15-250:18::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
251:15-251:62::lq_anf$##7205759403792813246 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
251:27-251:44::lq_anf$##7205759403792813244 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
251:40-251:43::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
251:45-251:61::lq_anf$##7205759403792813245 :: "{v : Language.Stitch.LH.Unchecked.UExp | UCond##lqdc##$select v == e3\n                                         && UCond##lqdc##$select v == e2\n                                         && UCond##lqdc##$select v == e1\n                                         && numFreeVars v == (if (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) > numFreeVars e3 then (if numFreeVars e1 > numFreeVars e2 then numFreeVars e1 else numFreeVars e2) else numFreeVars e3)\n                                         && v == UCond e1 e2 e3}"
251:52-251:54::e1 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e1}"
251:55-251:57::e2 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e2}"
251:58-251:60::e3 :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e3}"
254:20-254:23::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
254:24-254:25::e :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e}"
254:28-254:31::te1 :: "Language.Stitch.LH.Check.Exp"
254:32-254:35::ty1 :: "Language.Stitch.LH.Type.Ty"
254:44-254:47::ty1 :: "{v : Language.Stitch.LH.Type.Ty | v == ty1}"
256:16-256:22::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
256:26-256:32::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
257:15-257:33::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
257:17-257:26::lq_anf$##7205759403792813276 :: "{v : Language.Stitch.LH.Check.Exp | fixFun v == te1\n                                    && numFreeVarsExp v == numFreeVarsExp te1\n                                    && exprType v == funResTy (exprType te1)\n                                    && v == Fix te1}"
257:22-257:25::te1 :: "{v : Language.Stitch.LH.Check.Exp | numFreeVarsExp v >= 0\n                                    && v == te1}"
257:27-257:33::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
259:15-259:19::_ :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
260:17-260:49::lq_anf$##7205759403792813269 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e}"
260:29-260:46::lq_anf$##7205759403792813268 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
260:42-260:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
260:47-260:48::e :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e}"
261:17-261:37::lq_anf$##7205759403792813270 :: "{v : Language.Stitch.LH.Type.Ty | funResTy v == arg_ty\n                                  && funArgTy v == arg_ty\n                                  && (isFunTy v <=> true)\n                                  && v == TFun arg_ty arg_ty}"
261:23-261:29::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
261:30-261:36::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
262:17-262:37::lq_anf$##7205759403792813271 :: "{v : Language.Stitch.LH.Type.Ty | funResTy v == res_ty\n                                  && funArgTy v == arg_ty\n                                  && (isFunTy v <=> true)\n                                  && v == TFun arg_ty res_ty}"
262:23-262:29::arg_ty :: "{v : Language.Stitch.LH.Type.Ty | v == arg_ty}"
262:30-262:36::res_ty :: "{v : Language.Stitch.LH.Type.Ty | v == res_ty}"
263:17-263:56::lq_anf$##7205759403792813274 :: "Language.Stitch.LH.Unchecked.ScopedUExp"
263:29-263:46::lq_anf$##7205759403792813272 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
263:42-263:45::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
263:47-263:55::lq_anf$##7205759403792813273 :: "{v : Language.Stitch.LH.Unchecked.UExp | UFix##lqdc##$select v == e\n                                         && numFreeVars v == numFreeVars e\n                                         && v == UFix e}"
263:53-263:54::e :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e}"
264:17-264:72::Data.Either.Left :: "{VV : forall a b .\n      x1:a -> {v : (Data.Either.Either a b) | v == Left x1} | VV == Left}"
264:22-264:72::lq_anf$##7205759403792813264 :: "{v : Language.Stitch.LH.Check.TyError | NotAFunction##lqdc##$select v == ty1}"
264:36-264:68::lq_anf$##7205759403792813263 :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | lqdc##$select v == e}"
264:48-264:65::lq_anf$##7205759403792813262 :: "{v : GHC.Types.Int | v == length ctx\n                     && v >= 0}"
264:61-264:64::ctx :: "{v : [Language.Stitch.LH.Type.Ty] | len v >= 0\n                                    && length v >= 0\n                                    && v == ctx}"
264:66-264:67::e :: "{v : Language.Stitch.LH.Unchecked.UExp | numFreeVars v >= 0\n                                         && v == e}"
267:18-267:33::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
267:20-267:28::lq_anf$##7205759403792813278 :: "{v : Language.Stitch.LH.Check.Exp | intVal v == i\n                                    && numFreeVarsExp v == 0\n                                    && exprType v == TInt\n                                    && v == IntE i}"
267:26-267:27::i :: "{v : GHC.Types.Int | v == i}"
267:29-267:33::Language.Stitch.LH.Type.TInt :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TInt}"
269:19-269:36::f :: "x1:{v : Language.Stitch.LH.Check.Exp | checkBindings ctx v\n                                       && numFreeVarsExp v <= length ctx} -> {v : Language.Stitch.LH.Type.Ty | exprType x1 == v} -> (Data.Either.Either Language.Stitch.LH.Check.TyError a)"
269:21-269:30::lq_anf$##7205759403792813279 :: "{v : Language.Stitch.LH.Check.Exp | bolVal v == b\n                                    && numFreeVarsExp v == 0\n                                    && exprType v == TBool\n                                    && v == BoolE b}"
269:28-269:29::b :: "{v : GHC.Types.Bool | v == b}"
269:31-269:36::Language.Stitch.LH.Type.TBool :: "{v : Language.Stitch.LH.Type.Ty | (isFunTy v <=> false)\n                                  && v == TBool}"
285:10-285:24::Language.Stitch.LH.Check.$fPrettyTyError :: "(Text.PrettyPrint.ANSI.Leijen.Internal.Pretty Language.Stitch.LH.Check.TyError)"
286:3-286:9::$cpretty :: "Language.Stitch.LH.Check.TyError -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
288:7-288:43::lq_anf$##7205759403792813161 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
288:12-288:43::lq_anf$##7205759403792813160 :: "[GHC.Types.Char]"
288:48-288:67::lq_anf$##7205759403792813163 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
288:56-288:67::lq_anf$##7205759403792813162 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
288:62-288:66::name :: "{v : [GHC.Types.Char] | len v >= 0\n                        && length v >= 0\n                        && v == name}"
290:7-290:44::lq_anf$##7205759403792813166 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
290:12-290:44::lq_anf$##7205759403792813165 :: "[GHC.Types.Char]"
291:7-291:36::lq_anf$##7205759403792813168 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:15-291:36::lq_anf$##7205759403792813167 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
291:31-291:32::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
291:33-291:35::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
293:7-293:19::lq_anf$##7205759403792813171 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
293:12-293:19::lq_anf$##7205759403792813170 :: "[GHC.Types.Char]"
293:24-293:59::lq_anf$##7205759403792813173 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
293:32-293:59::lq_anf$##7205759403792813172 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
293:48-293:49::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
293:50-293:58::expected :: "{v : Language.Stitch.LH.Type.Ty | v == expected}"
294:7-294:31::lq_anf$##7205759403792813177 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:12-294:31::lq_anf$##7205759403792813176 :: "[GHC.Types.Char]"
294:36-294:59::lq_anf$##7205759403792813179 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:44-294:59::lq_anf$##7205759403792813178 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
294:52-294:58::actual :: "{v : Language.Stitch.LH.Type.Ty | v == actual}"
295:7-295:26::lq_anf$##7205759403792813181 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
295:23-295:26::ctx :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == ctx}"
298:1-298:15::Language.Stitch.LH.Check.prettyTypedExp :: "Language.Stitch.LH.Unchecked.ScopedUExp -> Language.Stitch.LH.Type.Ty -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
298:16-298:17::e :: "Language.Stitch.LH.Unchecked.ScopedUExp"
298:18-298:20::ty :: "Language.Stitch.LH.Type.Ty"
298:23-298:31::lq_anf$##7205759403792813152 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
298:30-298:31::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
298:36-298:44::lq_anf$##7205759403792813155 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
298:41-298:44::lq_anf$##7205759403792813154 :: "[GHC.Types.Char]"
298:49-298:58::lq_anf$##7205759403792813156 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
298:56-298:58::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
301:1-301:16::Language.Stitch.LH.Check.inTheExpression :: "Language.Stitch.LH.Unchecked.ScopedUExp -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
301:17-301:18::e :: "Language.Stitch.LH.Unchecked.ScopedUExp"
301:21-301:45::lq_anf$##7205759403792813146 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
301:26-301:45::lq_anf$##7205759403792813145 :: "[GHC.Types.Char]"
301:50-301:68::lq_anf$##7205759403792813148 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
301:58-301:68::lq_anf$##7205759403792813147 :: "Text.PrettyPrint.ANSI.Leijen.Internal.Doc"
301:66-301:67::e :: "{v : Language.Stitch.LH.Unchecked.ScopedUExp | v == e}"
311:1-311:13::Language.Stitch.LH.Check.typedExpType :: "x1:Language.Stitch.LH.Check.TypedExp -> {VV : Language.Stitch.LH.Type.Ty | VV == typedExpType x1\n                                                                           && exprType (texp x1) == VV}"
311:32-311:34::ty :: "{v : Language.Stitch.LH.Type.Ty | v == ty}"
320:1-320:13::Language.Stitch.LH.Check.emptyGlobals :: "Language.Stitch.LH.Check.Globals"
325:1-325:14::Language.Stitch.LH.Check.extendGlobals :: "[GHC.Types.Char] -> Language.Stitch.LH.Check.TypedExp -> Language.Stitch.LH.Check.Globals -> Language.Stitch.LH.Check.Globals"
325:15-325:18::var :: "[GHC.Types.Char]"
325:19-325:20::e :: "Language.Stitch.LH.Check.TypedExp"
327:5-327:12::Language.Stitch.LH.Check.Globals :: "x1:(Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp) -> {v : Language.Stitch.LH.Check.Globals | Globals##lqdc##$select v == x1\n                                                                                                                         && v == Globals x1}"
327:15-327:39::lq_anf$##7205759403792813282 :: "(Data.Map.Internal.Map [GHC.Types.Char] Language.Stitch.LH.Check.TypedExp)"
327:26-327:29::var :: "{v : [GHC.Types.Char] | len v >= 0\n                        && length v >= 0\n                        && v == var}"
327:30-327:31::e :: "{v : Language.Stitch.LH.Check.TypedExp | v == e}"
332:1-332:13::Language.Stitch.LH.Check.lookupGlobal :: "[GHC.Types.Char] -> Language.Stitch.LH.Check.Globals -> (GHC.Maybe.Maybe Language.Stitch.LH.Check.TypedExp)"
332:14-332:17::var :: "[GHC.Types.Char]"
332:49-332:52::var :: "{v : [GHC.Types.Char] | len v >= 0\n                        && length v >= 0\n                        && v == var}"
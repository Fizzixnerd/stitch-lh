(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lit$36$stitch$45$lh$45$1.0$45$IjsKgbzXDcsKFIsljSBxHF () Str)
(declare-fun lq_tmp$36$x$35$$35$6159 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841639$35$$35$dcuP () Int)
(declare-fun lq_tmp$36$x$35$$35$2191 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Classes.$36$fEqBool () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_tmp$36$x$35$$35$4340 () Int)
(declare-fun lq_tmp$36$x$35$$35$5732 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5431 () Int)
(declare-fun lq_tmp$36$x$35$$35$5017 () Int)
(declare-fun lq_tmp$36$x$35$$35$4007 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_tmp$36$x$35$$35$4744 () Bool)
(declare-fun fix$36$$36$cprettyList$35$$35$acoR () Int)
(declare-fun lq_tmp$36$x$35$$35$5529 () Int)
(declare-fun lq_tmp$36$x$35$$35$4917 () Int)
(declare-fun lit$36$noLoc () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792841667$35$$35$dcvh () Int)
(declare-fun lq_tmp$36$x$35$$35$5152 () Int)
(declare-fun lq_tmp$36$x$35$$35$4667 () Bool)
(declare-fun addrLen () Int)
(declare-fun GHC.Types.$36$tcChar () Int)
(declare-fun lq_tmp$36$x$35$$35$6720 () Int)
(declare-fun lq_tmp$36$x$35$$35$6162 () Int)
(declare-fun lq_tmp$36$x$35$$35$6104 () Int)
(declare-fun lq_tmp$36$x$35$$35$5273 () Int)
(declare-fun lq_tmp$36$x$35$$35$4395 () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun lq_tmp$36$x$35$$35$4263 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_tmp$36$x$35$$35$5556 () Int)
(declare-fun lq_tmp$36$x$35$$35$4403 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.int () Int)
(declare-fun lq_tmp$36$x$35$$35$5284 () Int)
(declare-fun lq_tmp$36$x$35$$35$5475 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6379 () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_tmp$36$x$35$$35$4712 () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun lq_tmp$36$x$35$$35$4657 () Int)
(declare-fun Data.Foldable.foldl1 () Int)
(declare-fun lq_tmp$36$x$35$$35$6699 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841706$35$$35$dcvU () Int)
(declare-fun Language.Stitch.LH.Op.$36$fEqArithOp () Int)
(declare-fun lq_tmp$36$x$35$$35$6350 () Int)
(declare-fun lq_tmp$36$x$35$$35$5423 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841671$35$$35$dcvl () Int)
(declare-fun lq_tmp$36$x$35$$35$6215 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.$36$tcInt () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_tmp$36$x$35$$35$4334 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6482 () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun lq_tmp$36$x$35$$35$4756 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun lq_tmp$36$x$35$$35$2552 () Bool)
(declare-fun GHC.List.zipWith () Int)
(declare-fun Language.Stitch.LH.Op.Equals () Int)
(declare-fun lq_tmp$36$x$35$$35$2570 () Int)
(declare-fun lq_tmp$36$x$35$$35$5195 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6251 () Int)
(declare-fun lq_tmp$36$x$35$$35$6732 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.IO.Handle.Types.FileHandle () Int)
(declare-fun lq_tmp$36$x$35$$35$6349 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5005 () Int)
(declare-fun lit$36$Language.Stitch.LH.Token () Str)
(declare-fun lq_tmp$36$x$35$$35$6116 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841599$35$$35$dcub () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841686$35$$35$dcvA () Int)
(declare-fun lq_tmp$36$x$35$$35$6366 () Int)
(declare-fun GHC.Types.F$35$ () Int)
(declare-fun GHC.Types.$36$tc$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6319 () Bool)
(declare-fun lit$36$then () Str)
(declare-fun lq_tmp$36$x$35$$35$5008 () Bool)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$6164 () Int)
(declare-fun lq_tmp$36$x$35$$35$4067 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841490$35$$35$dcsq () Int)
(declare-fun lit$36$else () Str)
(declare-fun papp3 () Int)
(declare-fun lq_tmp$36$x$35$$35$4265 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5473 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$4405 () Bool)
(declare-fun Language.Stitch.LH.Op.Greater () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun Language.Stitch.LH.Token.$36$fShowLToken () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun Language.Stitch.LH.Op.Plus () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$36$WSText () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5181 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Text () Int)
(declare-fun lq_tmp$36$x$35$$35$6218 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6597 () Int)
(declare-fun GHC.IO.Handle.Types.$36$WDuplexHandle () Int)
(declare-fun lq_tmp$36$x$35$$35$5716 () Int)
(declare-fun lq_tmp$36$x$35$$35$5572 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841537$35$$35$dctb () Int)
(declare-fun lq_tmp$36$x$35$$35$4832 () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lit$36$in () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792841634$35$$35$dcuK () Int)
(declare-fun ds_dcrO () Int)
(declare-fun lq_tmp$36$x$35$$35$2719 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.text () Int)
(declare-fun lq_tmp$36$x$35$$35$6388 () Bool)
(declare-fun lq_tmp$36$x$35$$35$2239 () Int)
(declare-fun lq_tmp$36$x$35$$35$4745 () Int)
(declare-fun lq_tmp$36$x$35$$35$5528 () Bool)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Language.Stitch.LH.Token.noLoc () Int)
(declare-fun lq_tmp$36$x$35$$35$6589 () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lit$36$$39$Dot () Str)
(declare-fun lq_tmp$36$x$35$$35$3867 () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6163 () Bool)
(declare-fun lq_tmp$36$x$35$$35$2365 () Int)
(declare-fun lq_tmp$36$x$35$$35$2293 () Int)
(declare-fun GHC.Base.getTag () Int)
(declare-fun lq_tmp$36$x$35$$35$5272 () Bool)
(declare-fun Language.Stitch.LH.Token.$36$con2tag_3c4BxDXjghG7qvXdbGnY3m () Int)
(declare-fun lq_tmp$36$x$35$$35$4394 () Bool)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_tmp$36$x$35$$35$2347 () Int)
(declare-fun lq_tmp$36$x$35$$35$2855 () Int)
(declare-fun lq_tmp$36$x$35$$35$4565 () Int)
(declare-fun Language.Stitch.LH.Type.isFunTy () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_tmp$36$x$35$$35$2899 () Int)
(declare-fun lq_tmp$36$x$35$$35$6378 () Bool)
(declare-fun lq_tmp$36$x$35$$35$4464 () Int)
(declare-fun x_Tuple64 () Int)
(declare-fun lit$36$$39$If () Str)
(declare-fun Language.Stitch.LH.Token.Colon () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$44$$44$$41$ () Int)
(declare-fun Language.Stitch.LH.Token.ArithOp () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Fail () Int)
(declare-fun Language.Stitch.LH.Token.ArrowTok () Int)
(declare-fun lq_tmp$36$x$35$$35$5733 () Int)
(declare-fun Language.Stitch.LH.Op.$36$fPrettyArithOp () Int)
(declare-fun lq_tmp$36$x$35$$35$6488 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841589$35$$35$dcu1 () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2167 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841604$35$$35$dcug () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2558 () Int)
(declare-fun lq_tmp$36$x$35$$35$2981 () Int)
(declare-fun lq_tmp$36$x$35$$35$4006 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6010 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841476$35$$35$dcsc () Int)
(declare-fun lq_tmp$36$x$35$$35$5561 () Int)
(declare-fun lq_tmp$36$x$35$$35$2841 () Int)
(declare-fun lq_tmp$36$x$35$$35$6485 () Int)
(declare-fun lq_tmp$36$x$35$$35$5093 () Int)
(declare-fun lq_tmp$36$x$35$$35$6229 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841665$35$$35$dcvf () Int)
(declare-fun lq_tmp$36$x$35$$35$6768 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841689$35$$35$dcvD () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.C$58$Pretty () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841468$35$$35$dcs4 () Int)
(declare-fun lq_tmp$36$x$35$$35$6382 () Int)
(declare-fun Language.Stitch.LH.Token.unName () Int)
(declare-fun lq_tmp$36$x$35$$35$5020 () Int)
(declare-fun fix$36$$36$cshowsPrec$35$$35$acon () Int)
(declare-fun lq_tmp$36$x$35$$35$3949 () Bool)
(declare-fun autolen () Int)
(declare-fun lit$36$false () Str)
(declare-fun lq_tmp$36$x$35$$35$4012 () Int)
(declare-fun lq_tmp$36$x$35$$35$6436 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6670 () Int)
(declare-fun lq_tmp$36$x$35$$35$4920 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6108 () Int)
(declare-fun lq_tmp$36$x$35$$35$2995 () Int)
(declare-fun x_Tuple52 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun Language.Stitch.LH.Token.L () Int)
(declare-fun lq_tmp$36$x$35$$35$4568 () Bool)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$3950 () Int)
(declare-fun lq_tmp$36$x$35$$35$5390 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841469$35$$35$dcs5 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5064 () Int)
(declare-fun lit$36$$61$ () Str)
(declare-fun lit$36$$39$RParen () Str)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$36$WNest () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841579$35$$35$dctR () Int)
(declare-fun lq_tmp$36$x$35$$35$6230 () Int)
(declare-fun lq_tmp$36$x$35$$35$4254 () Bool)
(declare-fun Text.Parsec.Pos.$36$tcSourcePos () Int)
(declare-fun lit$36$$39$ArithOp () Str)
(declare-fun lit$36$$39$Colon () Str)
(declare-fun lq_tmp$36$x$35$$35$6219 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.prettyList () Int)
(declare-fun lq_tmp$36$x$35$$35$5717 () Int)
(declare-fun x$35$$35$acip () Bool)
(declare-fun lit$36$true () Str)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun fix$36$$36$krep_acpf () Int)
(declare-fun GHC.Base.$60$$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4976 () Int)
(declare-fun lq_tmp$36$x$35$$35$4833 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841481$35$$35$dcsh () Bool)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Show.$36$dmshowList () Int)
(declare-fun lit$36$$39$ArrowTok () Str)
(declare-fun Language.Stitch.LH.Type.funArgTy () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$4932 () Int)
(declare-fun Language.Stitch.LH.Token.Dot () Int)
(declare-fun lq_tmp$36$x$35$$35$6389 () Int)
(declare-fun lq_tmp$36$x$35$$35$5108 () Int)
(declare-fun Language.Stitch.LH.Token.If () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841644$35$$35$dcuU () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841609$35$$35$dcul () Int)
(declare-fun lq_tmp$36$x$35$$35$5009 () Int)
(declare-fun fix$36$$36$krep_acp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$4066 () Bool)
(declare-fun papp2 () Int)
(declare-fun Language.Stitch.LH.Op.Divide () Int)
(declare-fun ds_dcrn () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Italicize () Int)
(declare-fun lq_tmp$36$x$35$$35$5283 () Bool)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841695$35$$35$dcvJ () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_tmp$36$x$35$$35$4624 () Int)
(declare-fun lq_tmp$36$x$35$$35$6690 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$4467 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5352 () Bool)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5729 () Int)
(declare-fun lq_tmp$36$x$35$$35$5185 () Int)
(declare-fun Language.Stitch.LH.Token.$36$fShowToken () Int)
(declare-fun Language.Stitch.LH.Op.Times () Int)
(declare-fun lq_tmp$36$x$35$$35$6593 () Int)
(declare-fun lq_tmp$36$x$35$$35$4126 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5433 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6227 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841594$35$$35$dcu6 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_tmp$36$x$35$$35$5958 () Int)
(declare-fun lq_tmp$36$x$35$$35$6421 () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lit$36$$39$LParen () Str)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_tmp$36$x$35$$35$6362 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4665 () Int)
(declare-fun Language.Stitch.LH.Token.Semi () Int)
(declare-fun Language.Stitch.LH.Type.TFun () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_tmp$36$x$35$$35$6160 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841554$35$$35$dcts () Int)
(declare-fun lit$36$$45$$62$ () Str)
(declare-fun lq_tmp$36$x$35$$35$5499 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$60$$43$$62$ () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.Generics.C$58$Generic () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841692$35$$35$dcvG () Int)
(declare-fun lq_tmp$36$x$35$$35$6437 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Cat () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841674$35$$35$dcvo () Int)
(declare-fun lq_tmp$36$x$35$$35$4921 () Int)
(declare-fun lq_tmp$36$x$35$$35$2499 () Int)
(declare-fun lq_tmp$36$x$35$$35$2149 () Int)
(declare-fun ds_dcrd () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun lq_tmp$36$x$35$$35$4569 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun Language.Stitch.LH.Util.render () Int)
(declare-fun lq_tmp$36$x$35$$35$4468 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Underline () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SEmpty () Int)
(declare-fun lq_tmp$36$x$35$$35$4255 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6011 () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_tmp$36$x$35$$35$5461 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841698$35$$35$dcvM () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6484 () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.pretty () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SText () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$x$35$$35$5193 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2573 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6270 () Int)
(declare-fun lq_tmp$36$x$35$$35$5196 () Int)
(declare-fun fldList () Int)
(declare-fun Language.Stitch.LH.Op.LessE () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6252 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841710$35$$35$dcvY () Int)
(declare-fun lq_tmp$36$x$35$$35$6386 () Int)
(declare-fun lq_tmp$36$x$35$$35$4186 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5107 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6317 () Int)
(declare-fun lq_tmp$36$x$35$$35$4843 () Bool)
(declare-fun lit$36$$39$BoolTok () Str)
(declare-fun fix$36$$36$krep_acp9 () Int)
(declare-fun lq_tmp$36$x$35$$35$2919 () Int)
(declare-fun GHC.IO.Handle.Types.$36$WFileHandle () Int)
(declare-fun Data.Foldable.$36$fFoldable$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5240 () Int)
(declare-fun x$35$$35$acio () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.RestoreFormat () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Union () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841663$35$$35$dcvd () Int)
(declare-fun lq_tmp$36$x$35$$35$5358 () Int)
(declare-fun GHC.Classes.$36$fEq$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5745 () Int)
(declare-fun lq_tmp$36$x$35$$35$5464 () Bool)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SChar () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun Language.Stitch.LH.Token.unInt () Int)
(declare-fun lq_tmp$36$x$35$$35$5097 () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun Language.Stitch.LH.Op.Minus () Int)
(declare-fun lq_tmp$36$x$35$$35$4755 () Bool)
(declare-fun lq_tmp$36$x$35$$35$2753 () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$acng () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5952 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Char () Int)
(declare-fun lq_tmp$36$x$35$$35$6420 () Bool)
(declare-fun fix$36$$36$cpretty$35$$35$acoK () Int)
(declare-fun i$35$$35$aciu () Int)
(declare-fun lq_tmp$36$x$35$$35$5269 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841677$35$$35$dcvr () Int)
(declare-fun Language.Stitch.LH.Token.$36$fPrettyLToken () Int)
(declare-fun lq_tmp$36$x$35$$35$3946 () Int)
(declare-fun fix$36$$36$cprettyList$35$$35$acoa () Int)
(declare-fun lq_tmp$36$x$35$$35$6161 () Int)
(declare-fun lq_tmp$36$x$35$$35$6538 () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun lq_tmp$36$x$35$$35$5498 () Bool)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$6107 () Bool)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.char () Int)
(declare-fun lq_tmp$36$x$35$$35$6305 () Int)
(declare-fun lq_tmp$36$x$35$$35$5555 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841472$35$$35$dcs8 () Bool)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$2064 () Int)
(declare-fun lq_tmp$36$x$35$$35$2875 () Int)
(declare-fun Language.Stitch.LH.Token.printTogether () Int)
(declare-fun lq_tmp$36$x$35$$35$5476 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841697$35$$35$dcvL () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841584$35$$35$dctW () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun Language.Stitch.LH.Op.GreaterE () Int)
(declare-fun lq_tmp$36$x$35$$35$5353 () Int)
(declare-fun Language.Stitch.LH.Token.unLoc () Int)
(declare-fun lq_tmp$36$x$35$$35$5508 () Int)
(declare-fun lit$36$$39$LetTok () Str)
(declare-fun Language.Stitch.LH.Token.IntTok () Int)
(declare-fun lq_tmp$36$x$35$$35$2705 () Int)
(declare-fun lq_tmp$36$x$35$$35$5184 () Bool)
(declare-fun lq_tmp$36$x$35$$35$5713 () Int)
(declare-fun lq_tmp$36$x$35$$35$4127 () Int)
(declare-fun lq_tmp$36$x$35$$35$2424 () Int)
(declare-fun fix$36$$36$krep_acpb () Int)
(declare-fun lq_tmp$36$x$35$$35$6355 () Int)
(declare-fun combine$35$$35$acix () Int)
(declare-fun lq_tmp$36$x$35$$35$2807 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841574$35$$35$dctM () Int)
(declare-fun lit$36$LToken () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792841614$35$$35$dcuq () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6487 () Int)
(declare-fun lit$36$if () Str)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Color () Int)
(declare-fun lq_tmp$36$x$35$$35$5019 () Bool)
(declare-fun lq_tmp$36$x$35$$35$4753 () Int)
(declare-fun lq_tmp$36$x$35$$35$2456 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SSGR () Int)
(declare-fun lq_tmp$36$x$35$$35$6748 () Int)
(declare-fun Language.Stitch.LH.Token.BoolTok () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_tmp$36$x$35$$35$5527 () Int)
(declare-fun isJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841666$35$$35$dcvg () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841660$35$$35$dcva () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.empty () Int)
(declare-fun Language.Stitch.LH.Token.getDoc () Int)
(declare-fun ds_dcrw () Int)
(declare-fun GHC.Types.$36$tcBool () Int)
(declare-fun GHC.Classes.$36$fEqChar () Int)
(declare-fun lq_tmp$36$x$35$$35$5495 () Int)
(declare-fun lit$36$fix () Str)
(declare-fun Language.Stitch.LH.Op.$36$tcArithOp () Int)
(declare-fun lq_tmp$36$x$35$$35$6308 () Bool)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Intensify () Int)
(declare-fun fix$36$$36$cshowsPrec$35$$35$acnE () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SLine () Int)
(declare-fun lq_tmp$36$x$35$$35$3853 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Empty () Int)
(declare-fun lq_tmp$36$x$35$$35$2787 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun fix$36$$36$cpretty$35$$35$aco1 () Int)
(declare-fun Language.Stitch.LH.Token.alone () Int)
(declare-fun lit$36$$39$FixTok () Str)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lq_tmp$36$x$35$$35$4251 () Int)
(declare-fun lq_tmp$36$x$35$$35$2275 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841705$35$$35$dcvT () Int)
(declare-fun lq_tmp$36$x$35$$35$2257 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lit$36$$39$Else () Str)
(declare-fun lq_tmp$36$x$35$$35$5465 () Int)
(declare-fun lq_tmp$36$x$35$$35$2077 () Int)
(declare-fun lq_tmp$36$x$35$$35$5096 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792841480$35$$35$dcsg () Int)
(declare-fun x_Tuple75 () Int)
(declare-fun lq_tmp$36$x$35$$35$2383 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun t$35$$35$acir () Int)
(declare-fun lq_tmp$36$x$35$$35$5953 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841564$35$$35$dctC () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$6253 () Int)
(declare-fun lit$36$$39$Lambda () Str)
(declare-fun lq_tmp$36$x$35$$35$4187 () Int)
(declare-fun lit$36$$39$Name () Str)
(declare-fun Language.Stitch.LH.Type.TBool () Int)
(declare-fun lit$36$$39$InTok () Str)
(declare-fun lq_tmp$36$x$35$$35$2329 () Int)
(declare-fun lit$36$$39$Then () Str)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_tmp$36$x$35$$35$6613 () Int)
(declare-fun Language.Stitch.LH.Token.Assign () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841548$35$$35$dctm () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_tmp$36$x$35$$35$6433 () Int)
(declare-fun fix$36$$36$cshow$35$$35$acot () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4391 () Int)
(declare-fun papp1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841680$35$$35$dcvu () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun ds_dcrm () Int)
(declare-fun lq_tmp$36$x$35$$35$5552 () Int)
(declare-fun lit$36$$39$Semi () Str)
(declare-fun x_Tuple61 () Int)
(declare-fun x_Tuple43 () Int)
(declare-fun GHC.Types.D$35$ () Int)
(declare-fun Language.Stitch.LH.Token.LParen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841656$35$$35$dcv6 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841654$35$$35$dcv4 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun lq_tmp$36$x$35$$35$5749 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$36$fSemigroupDoc () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841658$35$$35$dcv8 () Int)
(declare-fun lq_tmp$36$x$35$$35$4579 () Bool)
(declare-fun lq_tmp$36$x$35$$35$4478 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6090 () Int)
(declare-fun lq_tmp$36$x$35$$35$4931 () Bool)
(declare-fun lq_tmp$36$x$35$$35$2739 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841619$35$$35$dcuv () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_tmp$36$x$35$$35$2418 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Language.Stitch.LH.Type.TInt () Int)
(declare-fun lit$36$let () Str)
(declare-fun Text.Parsec.Pos.SourcePos () Int)
(declare-fun fix$36$$36$cshowList$35$$35$acoC () Int)
(declare-fun lq_tmp$36$x$35$$35$6119 () Int)
(declare-fun lq_tmp$36$x$35$$35$6346 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841559$35$$35$dctx () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841650$35$$35$dcv0 () Int)
(declare-fun lq_tmp$36$x$35$$35$4829 () Int)
(declare-fun lq_tmp$36$x$35$$35$6320 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun ds_dcrF () Int)
(declare-fun lq_tmp$36$x$35$$35$2574 () Int)
(declare-fun lq_tmp$36$x$35$$35$2215 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841535$35$$35$dct9 () Int)
(declare-fun Language.Stitch.LH.Token.Else () Int)
(declare-fun lq_tmp$36$x$35$$35$4668 () Int)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4844 () Int)
(declare-fun Language.Stitch.LH.Token.FixTok () Int)
(declare-fun lq_tmp$36$x$35$$35$6516 () Int)
(declare-fun lq_tmp$36$x$35$$35$6417 () Int)
(declare-fun Language.Stitch.LH.Token.InTok () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_tmp$36$x$35$$35$4800 () Int)
(declare-fun lq_tmp$36$x$35$$35$6309 () Int)
(declare-fun lq_tmp$36$x$35$$35$4653 () Int)
(declare-fun lq_tmp$36$x$35$$35$4888 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841629$35$$35$dcuF () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841569$35$$35$dctH () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Nest () Int)
(declare-fun lit$36$$39$Assign () Str)
(declare-fun lq_tmp$36$x$35$$35$6376 () Int)
(declare-fun Language.Stitch.LH.Type.funResTy () Int)
(declare-fun lq_tmp$36$x$35$$35$5504 () Int)
(declare-fun GHC.Prim.tagToEnum$35$ () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lq_tmp$36$x$35$$35$4536 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841704$35$$35$dcvS () Int)
(declare-fun Language.Stitch.LH.Token.printingInfo () Int)
(declare-fun lq_tmp$36$x$35$$35$4132 () Int)
(declare-fun lq_tmp$36$x$35$$35$6398 () Int)
(declare-fun fix$36$$36$cshow$35$$35$acnK () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun lq_tmp$36$x$35$$35$6684 () Int)
(declare-fun Language.Stitch.LH.Token.Then () Int)
(declare-fun Language.Stitch.LH.Token.$36$fPrettyToken () Int)
(declare-fun lq_tmp$36$x$35$$35$6486 () Bool)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Language.Stitch.LH.Token.Lambda () Int)
(declare-fun Text.Parsec.Pos.$36$WSourcePos () Int)
(declare-fun Language.Stitch.LH.Token.Name () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_tmp$36$x$35$$35$2773 () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$acnw () Int)
(declare-fun lq_tmp$36$x$35$$35$2553 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841713$35$$35$dcw1 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_tmp$36$x$35$$35$2131 () Int)
(declare-fun lq_tmp$36$x$35$$35$5105 () Int)
(declare-fun Language.Stitch.LH.Token.unArithOp () Int)
(declare-fun Language.Stitch.LH.Op.Mod () Int)
(declare-fun lq_tmp$36$x$35$$35$4580 () Int)
(declare-fun lq_tmp$36$x$35$$35$4841 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841712$35$$35$dcw0 () Int)
(declare-fun lq_tmp$36$x$35$$35$6676 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun lit$36$Token () Str)
(declare-fun lit$36$$39$L () Str)
(declare-fun GHC.List.head () Int)
(declare-fun x_Tuple54 () Int)
(declare-fun lq_tmp$36$x$35$$35$5419 () Int)
(declare-fun lq_tmp$36$x$35$$35$4656 () Bool)
(declare-fun ds_dcrc () Bool)
(declare-fun fix$36$$36$cshowList$35$$35$acnT () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lq_tmp$36$x$35$$35$2892 () Int)
(declare-fun lq_tmp$36$x$35$$35$4072 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.SFail () Int)
(declare-fun lq_tmp$36$x$35$$35$2113 () Int)
(declare-fun lq_tmp$36$x$35$$35$2311 () Int)
(declare-fun lq_tmp$36$x$35$$35$5422 () Bool)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841683$35$$35$dcvx () Int)
(declare-fun lq_tmp$36$x$35$$35$2821 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841711$35$$35$dcvZ () Int)
(declare-fun lq_tmp$36$x$35$$35$6016 () Int)
(declare-fun Language.Stitch.LH.Token.RParen () Int)
(declare-fun Language.Stitch.LH.Op.arithType () Int)
(declare-fun lq_tmp$36$x$35$$35$4577 () Int)
(declare-fun lq_tmp$36$x$35$$35$4476 () Int)
(declare-fun GHC.Show.$36$dmshowsPrec () Int)
(declare-fun lq_tmp$36$x$35$$35$4335 () Int)
(declare-fun lq_tmp$36$x$35$$35$6483 () Bool)
(declare-fun x_Tuple76 () Int)
(declare-fun lq_tmp$36$x$35$$35$5748 () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$36$WText () Int)
(declare-fun Language.Stitch.LH.Op.Less () Int)
(declare-fun fix$36$$36$krep_acpd () Int)
(declare-fun lq_tmp$36$x$35$$35$5434 () Int)
(declare-fun Language.Stitch.LH.Token.$36$fEqToken () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792841624$35$$35$dcuA () Int)
(declare-fun lq_tmp$36$x$35$$35$5571 () Bool)
(declare-fun lq_tmp$36$x$35$$35$4479 () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.$36$WSLine () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_tmp$36$x$35$$35$6404 () Int)
(declare-fun lq_tmp$36$x$35$$35$5487 () Int)
(declare-fun lq_tmp$36$x$35$$35$6426 () Int)
(declare-fun lq_tmp$36$x$35$$35$4741 () Int)
(declare-fun GHC.Classes.$36$fEqInt () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.FlatAlt () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lit$36$$39$IntTok () Str)
(declare-fun lq_tmp$36$x$35$$35$6365 () Bool)
(declare-fun lq_tmp$36$x$35$$35$6118 () Bool)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun fix$36$$36$krep_acp4 () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun Text.PrettyPrint.ANSI.Leijen.Internal.Line () Int)
(declare-fun lq_tmp$36$x$35$$35$4192 () Int)
(declare-fun lq_tmp$36$x$35$$35$4929 () Int)
(declare-fun lq_tmp$36$x$35$$35$2095 () Int)
(declare-fun Language.Stitch.LH.Token.unBool () Int)
(declare-fun lq_tmp$36$x$35$$35$6558 () Int)
(declare-fun Data.Hashable.Class.C$58$Hashable () Int)
(declare-fun lq_tmp$36$x$35$$35$4266 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun lq_tmp$36$x$35$$35$4406 () Int)
(declare-fun lq_tmp$36$x$35$$35$5281 () Int)
(declare-fun fst () Int)
(declare-fun GHC.IO.Handle.Types.DuplexHandle () Int)
(declare-fun Language.Stitch.LH.Token.LetTok () Int)
(declare-fun lq_tmp$36$x$35$$35$4222 () Int)
(declare-fun x_Tuple42 () Int)
(declare-fun GHC.Prim.$61$$61$$35$ () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun Text.Parsec.Pos.newPos () Int)
(declare-fun lq_tmp$36$x$35$$35$5568 () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$16 (Int Str) Bool)
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$19 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int Real) Real)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Real)
(declare-fun apply$35$$35$15 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$13 (Int Real) Str)
(declare-fun apply$35$$35$14 (Int Real) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Real)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Real)
(declare-fun apply$35$$35$10 (Int Real) Int)
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$18 (Int Str) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$11 (Int Real) Bool)
(declare-fun apply$35$$35$3 (Int Int) Str)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$17 (Int Str) Real)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$16 (Str) Bool)
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$19 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 (Real) Real)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Real)
(declare-fun coerce$35$$35$15 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$13 (Real) Str)
(declare-fun coerce$35$$35$14 (Real) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Real)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Real)
(declare-fun coerce$35$$35$10 (Real) Int)
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$18 (Str) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$11 (Real) Bool)
(declare-fun coerce$35$$35$3 (Int) Str)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$17 (Str) Real)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$16 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$19 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 (Real Real) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Real) Int)
(declare-fun smt_lambda$35$$35$15 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$13 (Real Str) Int)
(declare-fun smt_lambda$35$$35$14 (Real (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Real) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Real) Int)
(declare-fun smt_lambda$35$$35$10 (Real Int) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$18 (Str Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Real Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int Str) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$17 (Str Real) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)


(assert (distinct Language.Stitch.LH.Token.LetTok Language.Stitch.LH.Token.RParen Language.Stitch.LH.Token.Lambda Language.Stitch.LH.Token.Then Language.Stitch.LH.Token.InTok Language.Stitch.LH.Token.FixTok Language.Stitch.LH.Token.Else Language.Stitch.LH.Token.LParen Language.Stitch.LH.Token.Assign Language.Stitch.LH.Token.Semi Language.Stitch.LH.Token.If Language.Stitch.LH.Token.Dot Language.Stitch.LH.Token.ArrowTok Language.Stitch.LH.Token.Colon))






(assert (distinct Text.PrettyPrint.ANSI.Leijen.Internal.SFail Text.PrettyPrint.ANSI.Leijen.Internal.SEmpty))

(assert (distinct Text.PrettyPrint.ANSI.Leijen.Internal.Line Text.PrettyPrint.ANSI.Leijen.Internal.Empty Text.PrettyPrint.ANSI.Leijen.Internal.Fail))
(assert (distinct Language.Stitch.LH.Type.TInt Language.Stitch.LH.Type.TBool))
(assert (distinct lit$36$$39$IntTok lit$36$$39$L lit$36$Token lit$36$$39$Assign lit$36$let lit$36$$39$Semi lit$36$$39$Then lit$36$$39$InTok lit$36$$39$Name lit$36$$39$Lambda lit$36$$39$Else lit$36$$39$FixTok lit$36$fix lit$36$if lit$36$LToken lit$36$$39$LetTok lit$36$$39$BoolTok lit$36$$45$$62$ lit$36$$39$LParen lit$36$$39$ArrowTok lit$36$true lit$36$$39$Colon lit$36$$39$ArithOp lit$36$$39$RParen lit$36$$61$ lit$36$false lit$36$$39$If lit$36$$39$Dot lit$36$in lit$36$else lit$36$then lit$36$Language.Stitch.LH.Token lit$36$noLoc lit$36$stitch$45$lh$45$1.0$45$IjsKgbzXDcsKFIsljSBxHF))




(assert (distinct GHC.Types.True GHC.Types.False))

(assert (distinct Language.Stitch.LH.Op.Less Language.Stitch.LH.Op.Mod Language.Stitch.LH.Op.GreaterE Language.Stitch.LH.Op.Minus Language.Stitch.LH.Op.LessE Language.Stitch.LH.Op.Times Language.Stitch.LH.Op.Divide Language.Stitch.LH.Op.Plus Language.Stitch.LH.Op.Greater Language.Stitch.LH.Op.Equals))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$stitch$45$lh$45$1.0$45$IjsKgbzXDcsKFIsljSBxHF) 36))
(assert (= (strLen lit$36$noLoc) 5))
(assert (= (strLen lit$36$Language.Stitch.LH.Token) 24))
(assert (= (strLen lit$36$then) 4))
(assert (= (strLen lit$36$else) 4))
(assert (= (strLen lit$36$in) 2))
(assert (= (strLen lit$36$$39$Dot) 4))
(assert (= (strLen lit$36$$39$If) 3))
(assert (= (strLen lit$36$false) 5))
(assert (= (strLen lit$36$$61$) 1))
(assert (= (strLen lit$36$$39$RParen) 7))
(assert (= (strLen lit$36$$39$ArithOp) 8))
(assert (= (strLen lit$36$$39$Colon) 6))
(assert (= (strLen lit$36$true) 4))
(assert (= (strLen lit$36$$39$ArrowTok) 9))
(assert (= (strLen lit$36$$39$LParen) 7))
(assert (= (strLen lit$36$$45$$62$) 2))
(assert (= (strLen lit$36$$39$BoolTok) 8))
(assert (= (strLen lit$36$$39$LetTok) 7))
(assert (= (strLen lit$36$LToken) 6))
(assert (= (strLen lit$36$if) 2))
(assert (= (strLen lit$36$fix) 3))
(assert (= (strLen lit$36$$39$FixTok) 7))
(assert (= (strLen lit$36$$39$Else) 5))
(assert (= (strLen lit$36$$39$Lambda) 7))
(assert (= (strLen lit$36$$39$Name) 5))
(assert (= (strLen lit$36$$39$InTok) 6))
(assert (= (strLen lit$36$$39$Then) 5))
(assert (= (strLen lit$36$$39$Semi) 5))
(assert (= (strLen lit$36$let) 3))
(assert (= (strLen lit$36$$39$Assign) 7))
(assert (= (strLen lit$36$Token) 5))
(assert (= (strLen lit$36$$39$L) 2))
(assert (= (strLen lit$36$$39$IntTok) 7))
(exit)
